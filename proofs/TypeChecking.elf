of : tm -> tp -> type.
%name of Of of.

of/empty : of empty unit.
of/obj : of (obj L R) (prod Tl Tr)
       <- of R Tr 
       <- of L Tl
       <- tp-mode Tr M
       <- tp-mode Tl M.

of/getLeft : of (getLeft O) A
          <- of O (prod A B).
of/getRight : of (getRight O) B
	    <- of O (prod A B).
of/left : of (left L Rt) (sum Lt Rt M)
       <- of L Lt
       <- tp-mode-safe Rt Rm
       <- tp-mode-safe Lt Lm
       <- ub Lm Rm M.
of/right : of (right Lt R) (sum Lt Rt M)
       <- of R Rt
       <- tp-mode-safe Rt Rm
       <- tp-mode-safe Lt Lm
       <- ub Lm Rm M.
% switch should be GLB not LUB, but right now just making them equal seems good enough.
of/switch : of (switch L R O) C
	      <- of O (sum A B M)
	      <- of R (B ~> C) 
	      <- of L (A ~> C)
	      <- tp-mode B M
	      <- tp-mode A M.

of/logic-var : tp-mode-safe B neg -> of logic-var B.

of/unsafe : tp-mode-safe B M -> of unsafe B.

of/@s : of Ef (A ~> C) -> of Ev A -> of (@s Ef Ev) C.

of/lam : of (lam F A) (A ~> B)
      <- tp-mode-safe B OutMode
      <- tp-mode-safe A InMode
      <- ({x} of x A -> of (F x) B).

%block of-b : some {t}{x : tm} block {_:of x t}.
%worlds (of-b | tm-b) (of _ _).


used-as-neg : {Result : mode } of E T -> of E' T' -> type.

used-as-neg/e : used-as-neg neg Of Of.

used-as-neg/getLeft : used-as-neg ResM OfX (of/getLeft E)
                   <- used-as-neg ResM OfX E.

used-as-neg/getRight : used-as-neg ResM OfX (of/getRight E)
                    <- used-as-neg ResM OfX E.

used-as-neg/lam-inner : used-as-neg ResM OfX (of/lam F _ _)
                     <- ({x}{of_x} used-as-neg ResM OfX (F x of_x)).

used-as-neg/app-l : used-as-neg ResM OfX (of/@s E1 E2)
                 <- used-as-neg ResM OfX E1.

used-as-neg/app-r 
   : used-as-neg ResM OfX (of/@s (F : of _ (T ~> _)) V)
  <- tp-mode T neg
  <- used-as-neg neg OfX V.

used-as-neg/objL : used-as-neg ResM OfX (of/obj (_ : tp-mode _ neg) _ L R)
                <- used-as-neg ResM OfX L.

used-as-neg/objR : used-as-neg ResM OfX (of/obj _ (_ : tp-mode _ neg) L R )
                <- used-as-neg ResM OfX R.

used-as-neg/obj : used-as-neg ResM OfX (of/obj _ _ L R)
               <- used-as-neg ResM OfX R
               <- used-as-neg ResM OfX L.

used-as-neg/product : used-as-neg ResM A E
                   <- used-as-neg ResM (of/getRight A) E
                   <- used-as-neg ResM (of/getLeft A) E.

used-as-neg/sum-unused : used-as-neg ResM A (of/switch _ _ L R I)
                      <- used-as-neg ResM A R
                      <- used-as-neg ResM A L.

used-as-neg/sum-used : used-as-neg ResM A (of/switch _ _ L R I)
                    <- used-as-neg ResM A I.

used-as-neg/left : used-as-neg ResM A (of/left _ _ _ L)
                <- used-as-neg ResM A L.

used-as-neg/right : used-as-neg ResM A (of/right _ _ _ L)
                <- used-as-neg ResM A L.

well-moded : of E T -> type.

wm/empty : well-moded of/empty.
wm/obj : well-moded (of/obj _ _ OfL OfR) <- well-moded OfR <- well-moded OfL.
wm/getLeft : well-moded (of/getLeft Of) <- well-moded Of.
wm/getRight : well-moded (of/getRight Of) <- well-moded Of.
wm/left : well-moded (of/left _ _ _ Of) <- well-moded Of.
wm/right : well-moded (of/right _ _ _ Of) <- well-moded Of.
wm/switch : well-moded (of/switch _ _ OfL OfR OfI) <- well-moded OfI <- well-moded OfR <- well-moded OfL.
wm/logic-var : well-moded (of/logic-var _).
wm/@s : well-moded (of/@s OfF OFV) <- well-moded OfV <- well-moded OfF.
wm/lam/+* : well-moded (of/lam F_Of (TmsA : tp-mode-safe A pos) TmsB)
         <- ({x}{of_x} well-moded of_x -> well-moded (F_Of x of_x)).

wm/lam/- : well-moded (of/lam F_Of (TmsA : tp-mode-safe A neg) (TmsB : tp-mode-safe _ M) )
      <- ({x}{of_x : of x A} used-as-neg M of_x (F_Of x of_x))
      <- ({x}{of_x : of x A} well-moded of_x -> well-moded (F_Of x of_x)).

%block wm-assm-b : some {t} block {x}{of_x:of x t}{_:well-moded of_x}.

