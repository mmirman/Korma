of : tm -> tp -> type.

of/empty : of empty unit.
of/obj : of L Tl -> of R Tr -> of (obj L R) (prod Tl Tr).
of/getLeft : of (getLeft O) A
          <- of O (prod A B).
of/getRight : of (getRight O) B
	    <- of O (prod A B).
of/left : of (left L) (sum Ta Tb Mc)
       <- of L Ta
       <- tp-mode-safe Tb Mb
       <- tp-mode-safe Ta Ma
       <- ub Ma Mb Mc.
of/right : of (right R) (sum Ta Tb Mc)
       <- of R Tb
       <- tp-mode-safe Tb Mb
       <- tp-mode-safe Ta Ma
       <- ub Ma Mb Mc.
% switch should be GLB not LUB, but right now just making them equal seems good enough.
of/switch : of (switch L R O) C
	      <- of O (sum A B M)
	      <- of R (B ~> C) 
	      <- of L (A ~> C)
	      <- tp-mode B M
	      <- tp-mode A M.

of/logic-var : tp-mode-safe B neg -> of logic-var B.

of/subsump : tp-mode-safe T' M -> T =< T' -> of E T -> of E T'. % derivations can be specialized.

of/@s : of Ef (A ~> C) -> of Ev A -> of (@s Ef Ev) C.

of/lam : of (lam F A) (A ~> B)
      <- tp-mode-safe B OutMode
      <- tp-mode-safe A InMode
      <- ({x}{A'} A' =< A -> of x A' -> of (F x) B).

%block assm-b : some {T} block {x : tm}{T' : tp}{_:T' =< T }{_:of x T'}.
%worlds (assm-b | tp-mode-always-safe) (of _ _).


used-as-neg : {Result : mode } of E T -> of E' T' -> type.

used-as-neg/e : used-as-neg neg A A.

used-as-neg/lam-inner : ({x}{T'}{s}{OfX} used-as-neg ResM OfA (F_Of x T' s OfX)) 
		      -> used-as-neg ResM OfA (of/lam F_Of _ _).

used-as-neg/app-l : used-as-neg ResM OfX OfE1
                 -> used-as-neg ResM OfX (of/@s OfE1 OfE2).

used-as-neg/app-r : used-as-neg ResM OfX (of/@s OfF  (OfV : of _ Vt))
		 <- tp-mode Vt neg
                 <- used-as-neg neg OfX OfV.

used-as-neg/objL : used-as-neg ResM OfX (of/obj (OfL : of _ Lt) OfR)
		<- tp-mode Lt neg
                <- used-as-neg ResM OfX OfL.

used-as-neg/objR : used-as-neg ResM OfX (of/obj OfL (OfR : of _ Rt))
		<- tp-mode Rt neg
                <- used-as-neg ResM OfX OfR.

used-as-neg/product : used-as-neg ResM (of/getLeft OfA) OfE 
                   -> used-as-neg ResM (of/getRight OfA) OfE 
                   -> used-as-neg ResM OfA OfE.

used-as-neg/sum-unused : used-as-neg ResM OfA OfL
                      -> used-as-neg ResM OfA OfR
                      -> used-as-neg ResM OfA (of/switch _ _ OfL OfR _).

used-as-neg/sum-used : used-as-neg ResM OfA OfI
                    -> used-as-neg ResM OfA (of/switch _ _ _ _ OfI).

used-as-neg/left : used-as-neg ResM OfA OfI
                    -> used-as-neg ResM OfA (of/left _ _ _ OfI).

used-as-neg/right : used-as-neg ResM OfA OfI
      	         -> used-as-neg ResM OfA (of/right _ _ _ OfI).

%worlds (assm-b | tp-mode-always-safe) (used-as-neg _ _ _).

well-moded : of E T -> type.
wm/empty : well-moded of/empty.
wm/obj : well-moded (of/obj OfL OfR) <- well-moded OfR <- well-moded OfL.
wm/getLeft : well-moded (of/getLeft Of) <- well-moded Of.
wm/getRight : well-moded (of/getRight Of) <- well-moded Of.
wm/left : well-moded (of/left _ _ _ Of) <- well-moded Of.
wm/right : well-moded (of/right _ _ _ Of) <- well-moded Of.
wm/switch : well-moded (of/switch _ _ OfL OfR OfI) <- well-moded OfI <- well-moded OfR <- well-moded OfL.
wm/logic-var : well-moded (of/logic-var _).
wm/subsump : well-moded (of/subsump _ _ Of) <- well-moded Of.
wm/@s : well-moded (of/@s OfF OFV) <- well-moded OfV <- well-moded OfF.
wm/lam/+* : well-moded (of/lam F_Of (TmsA : tp-mode-safe A pos) TmsB)
         <- ({x}{A'}{s}{OfX} well-moded OfX -> well-moded (F_Of x A' s OfX)).
wm/lam/- : well-moded (of/lam F_Of (TmsA : tp-mode-safe A neg) (TmsB : tp-mode-safe B M) )
      <- ({x}{A'}{s}{OfX} used-as-neg M OfX (F_Of x A' s OfX))
      <- ({x}{A'}{s}{OfX} well-moded OfX -> well-moded (F_Of x A' s OfX)).

%block wm-assm-b : some {T} block {x : tm}{T' : tp}{_:T' =< T }{OfX:of x T'}{_:well-moded OfX}.
%worlds (wm-assm-b | assm-b | tp-mode-always-safe) (well-moded _).