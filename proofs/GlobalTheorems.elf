% Fun fact: percent dot ends the file

subst-of : of V T
      -> ({x} of x T -> of (F x) Ot)
      -> of (F V) Ot
      -> type.
- : subst-of (Of : of V T) F (F V Of).
%mode subst-of +D1 +D2 -D3.
%worlds () (subst-of _ _ _).
%total {A B} (subst-of A B _).

pres : step E E' -> of E T -> of E' T -> type.
%mode pres +Step +T -T'.

pres/e : pres step/e Of Of.
pres/trans : pres (step/trans Sbc Sab) OfA OfC
          <- pres Sab OfA OfB
          <- pres Sbc OfB OfC.

pres/lam : pres 
            step/lam
	    (of/@s (of/lam Foo_OfF TmsV TmsO) (OfV : of V _))
	    (Foo_OfF V OfV).

pres/@s 
   : pres (step/@s Step) 
          (of/@s OfEf OfEv) 
          (of/@s OfEf' OfEv)
  <- pres Step OfEf OfEf'.

pres/getLeft 
   : pres step/getLeft (of/getLeft (of/obj _ _ OfL OfR)) OfL.

pres/getRight 
   : pres step/getRight (of/getRight (of/obj _ _ OfL OfR)) OfR.

pres/getLeft-simp 
   : pres (step/getLeft-simp Step _) 
          (of/getLeft OfObj) 
          (of/getLeft OfObj')
  <- pres Step OfObj OfObj'.

pres/getRight-simp 
   : pres (step/getRight-simp Step _) 
          (of/getRight OfObj) 
          (of/getRight OfObj')
  <- pres Step OfObj OfObj'.

pres/switch-left : pres 
    (step/switch-left Step)
    (of/switch _ _ OfFl _ OfO)
    (of/@s OfFl OfL)
  <- pres Step OfO (of/left _ _ _ OfL).

pres/switch-right : pres 
     (step/switch-right (Step1 : step E3 (right E4)))
     (of/switch _ _ _ (Of2 : of E2 (T4 ~> T1)) (Of3 : of E3 (sum T2 T4 _)))
     (of/@s Of2 OfR)
    <- pres Step1 Of3 (of/right _ _ _ OfR).


%worlds () (pres _ _ _).
%total {A B} (pres A B _).
%freeze pres.

pres-wm : step E V -> well-moded (OfE : of E _) 
       -> {OfV : of V Vt } well-moded OfV -> type.
%mode pres-wm +A +B +C -D.
%worlds () (pres-wm _ _ _ _).
%trustme %total {A B C} (pres-wm A B C _).

wm-2-unsafe-free : well-moded (OfE : of E _) 
                -> unsafe-free E -> type.
%mode wm-2-unsafe-free +B -C.
%worlds () (wm-2-unsafe-free _ _).
%trustme %total {A} (wm-2-unsafe-free A _).

unsafe-free-2-absurd : unsafe-free unsafe -> absurd -> type.
%mode unsafe-free-2-absurd +B -C.
%worlds () (unsafe-free-2-absurd _ _).
%total {A} (unsafe-free-2-absurd A _).

tms-unique : tp-mode-safe A pos -> tp-mode-safe A neg -> absurd -> type.
%mode tms-unique +A +B -C.
%worlds () (tms-unique _ _ _).
%total {A B} (tms-unique A B _).

tm-unique : tp-mode A pos -> tp-mode A neg -> absurd -> type.
%mode tm-unique +A +B -C.
%worlds () (tm-unique _ _ _).
%total {A B} (tm-unique A B _).

from-absurd-ll : {of_x} absurd -> logic-less of_x -> type.
%mode from-absurd-ll +OfX +A -L.
%worlds (of-b | ll-b) (from-absurd-ll _ _ _).
%total {T O} (from-absurd-ll T O _).

uan-2-ll : used-as-neg R OfX OfV
        -> logic-less OfV
        -> logic-less OfX
        -> type.

- : uan-2-ll (used-as-neg/lam-inner F_UAN)
             (logic-less/lam F_LL_I : logic-less (of/lam _ TmsA _))
             (F_LL_X unsafe (of/unsafe TmsA) (logic-less/unsafe TmsA))
 <- ({x}{dx}{ll_x} uan-2-ll (F_UAN x dx) (F_LL_I x dx ll_x) (F_LL_X x dx ll_x)).

- : uan-2-ll used-as-neg/e LLV LLV.

- : uan-2-ll (used-as-neg/app-l UAN_F) (logic-less/app LL_F LL_V) LL_X
 <- uan-2-ll UAN_F LL_F LL_X.

- : uan-2-ll (used-as-neg/app-l UAN_F) (logic-less/app LL_F LL_V) LL_X
 <- uan-2-ll UAN_F LL_F LL_X.

- : uan-2-ll (used-as-neg/app-r UAN_V _) (logic-less/app LL_F LL_V) LL_X
 <- uan-2-ll UAN_V LL_V LL_X.

- : uan-2-ll (used-as-neg/obj UAN_L UAN_R) (logic-less/obj LL_L LL_R) LL_X
 <- uan-2-ll UAN_L LL_L LL_X.

- : uan-2-ll (used-as-neg/obj UAN_L UAN_R) (logic-less/obj-l LL_L) LL_X
 <- uan-2-ll UAN_L LL_L LL_X.
- : uan-2-ll (used-as-neg/obj UAN_L UAN_R) (logic-less/obj-r LL_R) LL_X
 <- uan-2-ll UAN_R LL_R LL_X.

- : uan-2-ll (used-as-neg/objL UAN_L) (logic-less/obj LL_L LL_R) LL_X
 <- uan-2-ll UAN_L LL_L LL_X.

- : uan-2-ll (used-as-neg/objR UAN_R) (logic-less/obj LL_L LL_R) LL_X
 <- uan-2-ll UAN_R LL_R LL_X.

- : uan-2-ll (used-as-neg/sum-unused UAN_XL UAN_XR) (logic-less/switch LL_L LL_R LL_I) LL_X
 <- uan-2-ll UAN_XL LL_L LL_X.

- : uan-2-ll (used-as-neg/sum-used UAN_XI) (logic-less/switch LL_L LL_R LL_I) LL_X
 <- uan-2-ll UAN_XI LL_I LL_X.

- : uan-2-ll (used-as-neg/left UAN_XI) (logic-less/left LL_I) LL_X
 <- uan-2-ll UAN_XI LL_I LL_X.

- : uan-2-ll (used-as-neg/right UAN_XI) (logic-less/right LL_I) LL_X
 <- uan-2-ll UAN_XI LL_I LL_X.

- : uan-2-ll (used-as-neg/getRight UAN_XI) (logic-less/getRight LL_I) LL_X
 <- uan-2-ll UAN_XI LL_I LL_X.

- : uan-2-ll (used-as-neg/getLeft UAN_XI) (logic-less/getLeft LL_I) LL_X
 <- uan-2-ll UAN_XI LL_I LL_X.

%mode uan-2-ll +UanXV +LLV -LLX.

%worlds (of-b | ll-b) (uan-2-ll _ _ _).
%total {A B} (uan-2-ll A B _).

ivar-2-ll : i-var R OfX OfV
        -> logic-less OfV
        -> logic-less OfX
        -> type.
- : ivar-2-ll (i-var/uan UAN) LL_E LL_X
 <- uan-2-ll UAN LL_E LL_X.

- : ivar-2-ll (i-var/product IVAR_XL IVAR_XR) LL_E LL_X
 <- ivar-2-ll IVAR_XL LL_E (logic-less/getLeft LL_X).

%mode ivar-2-ll +UanXV +LLV -LLX.
%worlds (of-b | ll-b) (ivar-2-ll _ _ _).
%total {A B} (ivar-2-ll A B _).


absurd-2-of-eq : absurd -> of-eq A B -> type.
%mode absurd-2-of-eq +A -B.
%worlds () (absurd-2-of-eq _ _).
%total {A} (absurd-2-of-eq A _).

absurd-2-tm-eq : absurd -> tm-eq A B -> type.
%mode absurd-2-tm-eq +A -B.
%worlds () (absurd-2-tm-eq _ _).
%total {A} (absurd-2-tm-eq A _).

absurd-2-step-eq : absurd -> step-eq A B -> type.
%mode absurd-2-step-eq +A -B.
%worlds () (absurd-2-step-eq _ _).
%total {A} (absurd-2-step-eq A _).

res/@s/-forms : {Step : step (@s (lam _ _) _) _} 
                used-as-neg neg OfX OfI
	     -> pres Step (of/@s OfF (OfI : of _ T)) OfV
             -> tp-mode T neg
             -> well-moded OfF
	     -> logic-less OfV
             -> logic-less OfX
             -> type.
%mode res/@s/-forms +A +B +C +M +D +E -F.
- : res/@s/-forms 
     step/lam 
     UanX_V
     (pres/lam : pres _ (of/@s _ OfI) _) 
     TmV- 
     (wm/lam/- Foo_WmF Foo_UanF)
     LL_FV 
     LL_X
 <- ivar-2-ll (Foo_UanF I OfI) LL_FV LL_V
 <- uan-2-ll UanX_V LL_V LL_X.

- : res/@s/-forms _ _ _ TmV- (wm/lam/+* Foo_WmF : well-moded (of/lam _ TmsV+ _)) _ LL_X
 <- tms-2-tm TmsV+ TmV+
 <- tm-unique TmV+ TmV- Absurd
 <- from-absurd-ll _ Absurd LL_X.
%worlds () (res/@s/-forms _ _ _ _ _ _ _).
%trustme %total {A C M D E B} (res/@s/-forms A B C M D E _).

% that this is pos ensures that the context is in fact resolving
resolving : used-as-neg M OfX OfE
	 -> pres Step OfE (OfV : of V Et)
         -> tp-mode-safe Et pos
         -> well-moded OfE
         -> logic-less OfV
	 -> logic-less OfX
	 -> type.

res/trans
 : resolving
    UanE
    (pres/trans PresBC (PresAB : pres StepAB OfA OfB))
    TmsC+
    WmE
    LL_C
    LL_X
 <- pres-wm StepAB WmE OfB WmB
 <- resolving used-as-neg/e PresBC TmsC+ WmB LL_C LL_B
 <- resolving UanE PresAB TmsC+ WmE LL_B LL_X.

res/eq
 : resolving
    UanE
    pres/e
    TmsB+
    _
    LL_E
    LL_X
 <- uan-2-ll UanE LL_E LL_X.

res/unsafe
  : resolving _ (_ : pres Step _ _) _ WmE (logic-less/unsafe TmsM) LL_X
 <- pres-wm Step WmE (of/unsafe TmsM) WmV
 <- wm-2-unsafe-free WmV UnsfV
 <- unsafe-free-2-absurd UnsfV Absurd
 <- from-absurd-ll _ Absurd LL_X. 

res/getLeft-simp
  : resolving
     (used-as-neg/getLeft UanX_V)
     (pres/getLeft-simp Pres)
     TmsE+
     (wm/getLeft (WmOfE : well-moded OfE))
     (logic-less/getLeft LL_V)
     LL_X
  <- of-safe OfE TmsObj
  <- tms-2-tm TmsE+ TmE+
  <- tm-2-tms-prod-l TmE+ TmsObj TmsObj'
  <- resolving UanX_V Pres TmsObj' WmOfE LL_V LL_X.

res/getRight-simp : resolving
     (used-as-neg/getRight UanX_V)
     (pres/getRight-simp Pres)
     TmsE+
     (wm/getRight (WmOfE : well-moded OfE))
     (logic-less/getRight LL_V)
     LL_X
  <- of-safe OfE TmsObj
  <- tms-2-tm TmsE+ TmE+
  <- tm-2-tms-prod-r TmE+ TmsObj TmsObj'
  <- resolving UanX_V Pres TmsObj' WmOfE LL_V LL_X.

res/getLeft/r-pos/obj
  : resolving
     (used-as-neg/getLeft (used-as-neg/obj UanX_V UanX_R))
     _
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- uan-2-ll UanX_V LL_V LL_X.

res/getLeft/r-pos/objL'
  : resolving
     (used-as-neg/getLeft (used-as-neg/objL UanL))
     _
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- uan-2-ll UanL LL_V LL_X.

res/getLeft/r-pos/objR
  : resolving
     (used-as-neg/getLeft (used-as-neg/objR _ : used-as-neg _ _ (of/obj TmV- _ _ _)))
     _
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- tms-2-tm TmsE+ TmV+
 <- tm-unique TmV+ TmV- Absurd
 <- from-absurd-ll _ Absurd LL_X.

res/getRight/r-pos/obj
  : resolving
     (used-as-neg/getRight (used-as-neg/obj UanX_V UanX_R))
     _
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- uan-2-ll UanX_R LL_V LL_X.

res/getRight/r-pos/objR'
  : resolving
     (used-as-neg/getRight (used-as-neg/objR UanR))
     _
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- uan-2-ll UanR LL_V LL_X.

res/getRight/r-pos/objL
  : resolving
     (used-as-neg/getRight (used-as-neg/objL Uan : used-as-neg _ _ (of/obj _ TmV- _ _)))
     _
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- tms-2-tm TmsE+ TmV+
 <- tm-unique TmV+ TmV- Absurd
 <- from-absurd-ll _ Absurd LL_X.

res/@s/app-l
  : resolving
     (used-as-neg/app-l UanXE1) 
     (pres/@s Pres)
     TmsE+
     (wm/@s (WmF : well-moded OfEf) WmI) 
     (logic-less/app LL_F LL_I) 
     LL_X
 <- of-safe OfEf (tp-mode-safe/~> TmsA TmsB)
 <- resolving UanXE1 Pres (tp-mode-safe/~> TmsA TmsB) 
    WmF LL_F LL_X.

resolving-sub : used-as-neg ResM OfX (of/lam F_OfF _ _)
             -> {OfY} used-as-neg ResM OfX (F_OfF _ OfY)
             -> type.
%mode resolving-sub +A +C -B.

%worlds () (resolving-sub _ _ _).
%trustme %total { A B } (resolving-sub A B _).

%% Need some lemmas here.
res/@s/app-l
  : resolving
     (used-as-neg/app-l UanX_F) 
     (_ : pres _ (of/@s _ OfI) _)
     TmsE+
     WmE
     LL_V
     LL_X
 <- resolving-sub UanX_F OfI UanX_FsI
 <- uan-2-ll UanX_FsI LL_V LL_X.

res/@s/app-r
  : resolving
     (used-as-neg/app-r UanX_V _)
     _
     TmsB+
     WmE
     (logic-less/app LL_F LL_V)
     LL_X
 <- uan-2-ll UanX_V LL_V LL_X.


res/switch-left
 : resolving
    (used-as-neg/sum-unused Uan_L Uan_R)
    _
    TmsB+
    WmE
    (logic-less/app LL_F LL_I)
    LL_X
 <- uan-2-ll Uan_L LL_F LL_X.

res/switch-right
 : resolving
    (used-as-neg/sum-unused Uan_L Uan_R)
    _
    TmsB+
    WmE
    (logic-less/app LL_F LL_I)
    LL_X
 <- uan-2-ll Uan_R LL_F LL_X.

res/sum-used
 : resolving
    (used-as-neg/sum-used Uan)
    Pres
    TmsB+
    WmE
    (logic-less/app LL_F LL_I)
    LL_X
 <- uan-2-ll Uan LL_I LL_X.

%{
res/sum-used
 : resolving 
    (used-as-neg/sum-used Uan)
    (pres/switch-left (Pres : pres Step _ _))
    TmsB+
    (wm/switch WmL _ WmI)
    LL_V
    LL_X
 <- pres-wm Step WmI _ WmI'
 <- resolving (used-as-neg/app-r Uan _) pres/e TmsB+ (wm/@s WmL WmI') LL_V LL_X. 
}%

res/sum-used/simp/l
 : resolving 
    (used-as-neg/sum-unused Uan_L Uan_R)
    _
    _
    _
    (logic-less/switch LL_L LL_R LL_I) 
    LL_X
 <- uan-2-ll Uan_L LL_L LL_X.

res/sum-used/simp/r
 : resolving
    (used-as-neg/sum-unused Uan_L Uan_R)
    _
    _
    _
    (logic-less/switch LL_L LL_R LL_I) 
    LL_X
 <- uan-2-ll Uan_R LL_R LL_X.

res/@s/app-r/forms
 : resolving
    (used-as-neg/app-r UanX_V TmV-)
    Pres
    TmsB+
    (wm/@s WmF WmV)
    LL_FV
    LL_X
 <- res/@s/-forms _ UanX_V Pres TmV- WmF LL_FV LL_X.

%% used-as-neg/e is precluded by this function being neg/pos acting.

res/e/getLeft
 : resolving
    used-as-neg/e
    pres/getLeft 
    TmsC+
    WmE
    LL_V
    (logic-less/getLeft (logic-less/obj-l LL_V)).

res/e/getRight
 : resolving
    used-as-neg/e
    pres/getRight
    TmsC+
    WmE
    LL_V
    (logic-less/getRight (logic-less/obj-r LL_V)).

- : resolving
     used-as-neg/e 
     pres/getLeft 
     TmsL+ 
     (wm/getLeft (X : well-moded (of/obj TmL- _ _ _)))
     _
     LL_X
  <- tms-2-tm TmsL+ TmL+
  <- tm-unique TmL+ TmL- Absurd
  <- from-absurd-ll _ Absurd LL_X.

- : resolving
     used-as-neg/e 
     pres/getRight
     TmsR+ 
     (wm/getRight (X : well-moded (of/obj _ TmR- _ _)))
     _
     LL_X
  <- tms-2-tm TmsR+ TmR+
  <- tm-unique TmR+ TmR- Absurd
  <- from-absurd-ll _ Absurd LL_X.


res/getRight/e
 : resolving
    (used-as-neg/getRight used-as-neg/e)
    pres/getRight
    TmsC+
    WmE
    LL_V
    (logic-less/obj-r LL_V).




resolving-ivar : i-var pos OfX OfE
	 -> pres Step OfE (OfV : of V Et)
         -> tp-mode-safe Et pos
         -> well-moded OfE
         -> logic-less OfV
	 -> logic-less OfX
	 -> type.


res-ivar/productL
  : resolving-ivar
     (i-var/product UanXl_E UanXr_E)
     Pres 
     TmsE+
     WmE
     LL_V
     LL_X
 <- resolving-ivar UanXl_E Pres TmsE+ WmE LL_V (logic-less/getLeft LL_X).

res-ivar/productR
  : resolving-ivar
     (i-var/product UanXl_E UanXr_E)
     Pres 
     TmsE+
     WmE
     LL_V
     LL_X
 <- resolving-ivar UanXr_E Pres TmsE+ WmE LL_V (logic-less/getRight LL_X).

res-ivar/uan
  : resolving-ivar
     (i-var/uan Uan)
     Pres 
     TmsE+
     WmE
     LL_V
     LL_X
 <- resolving Uan Pres TmsE+ WmE LL_V LL_X.

%mode (resolving +UanXE +Step +TmsEp +WM_E +LLV -LLX) (resolving-ivar +UanXE +Step +TmsEp +WM_E +LLV -LLX). 
%worlds () (resolving _ _ _ _ _ _) (resolving-ivar _ _ _ _ _ _).

%total { A B P D C  } (resolving C A P D B _).
%total {A B P D C} (resolving-ivar C A P D B _).

