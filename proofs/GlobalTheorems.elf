% Fun fact: percent dot ends the file

subst-of : of V T
      -> ({x} of x T -> of (F x) Ot)
      -> of (F V) Ot
      -> type.
- : subst-of (Of : of V T) F (F V Of).
%mode subst-of +D1 +D2 -D3.
%worlds () (subst-of _ _ _).
%total {A B} (subst-of A B _).

pres : step E E' -> of E T -> of E' T' -> T' =< T -> type.
%mode pres +Step +T -T' -Sub.

pres/lam : pres 
            step/lam
	    (of/@s (of/lam Foo_OfF TmsV TmsO) (OfV : of V _))
	    (Foo_OfF V OfV)
	    Eq
         <- =<-eq _ Eq.

pres/sub : pres Step (of/subsump TmsT SubT*T OfET*) OfE'T' SubT'T
        <- pres Step OfET* OfE'T' SubT'T*
        <- =<-trans SubT'T* SubT*T SubT'T.

pres/@s : pres (step/@s Step) (of/@s OfEf OfEv) (of/@s OfEf' OfEv) Subb'b
       <- pres Step OfEf OfEf' (=</~> Subaa' Subb'b).

pres/lam-subsump 
   : pres step/lam (of/@s (of/subsump _ (=</~> SubAA' SubB'B) OfFA'B') OfA) OfB* SubB*B
  <- of-safe OfFA'B' (tp-mode-safe/~> TmsA' TmsB')
  <- pres step/lam (of/@s OfFA'B' (of/subsump TmsA' SubAA' OfA)) OfB* SubB*B'
  <- =<-trans SubB*B' SubB'B SubB*B.

pres/getLeft-subsump 
  : pres Step (of/getLeft (of/subsump (tp-mode-safe/prod _ TmsL TmsR) (=</prod SubL'L SubR'R) OfO')) Of Sub
 <- of-safe OfO' (tp-mode-safe/prod _ TmsL' TmsR')
 <- pres Step (of/subsump TmsL SubL'L (of/getLeft OfO')) Of Sub.

pres/getLeft : pres step/getLeft (of/getLeft (of/obj OfL OfR)) OfL Eq <- =<-eq _ Eq. 

pres/getRight-subsump
  : pres Step (of/getRight (of/subsump (tp-mode-safe/prod _ TmsL TmsR) (=</prod SubL'L SubR'R) OfO')) Of Sub
 <- of-safe OfO' (tp-mode-safe/prod _ TmsL' TmsR')
 <- pres Step (of/subsump TmsR SubR'R (of/getRight OfO')) Of Sub.

pres/getRight : pres step/getRight (of/getRight (of/obj OfL OfR)) OfR Eq <- =<-eq _ Eq. 

pres/getLeft-simp : pres (step/getLeft-simp Step _) (of/getLeft OfObj) (of/getLeft OfObj') SubL
                 <- pres Step OfObj OfObj' (=</prod SubL SubR).

pres/getRight-simp : pres (step/getRight-simp Step _) (of/getRight OfObj) (of/getRight OfObj') SubR
                 <- pres Step OfObj OfObj' (=</prod SubL SubR).

pres/switch-simp : 
     pres (step/switch-simp Step _) 
          (of/switch TmsL TmsR OfFl OfFr OfO) 
	  (of/switch TmsL TmsR OfFl OfFr (of/subsump TmsOt SubO'O OfO'))
          Eq
  <- pres Step OfO OfO' SubO'O
  <- of-safe OfO TmsOt
  <- =<-eq _ Eq.

pres/switch-subsump 
   : pres 
      Step
      (of/switch TmL TmR OfFl OfFr
	 (of/subsump (tp-mode-safe/sum UbM Tms'L Tms'R) (=</sum SubM'M SubL'L SubR'R) OfO'))
      Of'
      Sub 
  <- =<-eq _ Eq
  <- of-safe OfO' (tp-mode-safe/sum _ TmsL' TmsR')
  <- of-safe (of/switch TmL TmR OfFl OfFr
	        (of/subsump (tp-mode-safe/sum UbM Tms'L Tms'R) (=</sum SubM'M SubL'L SubR'R) OfO'))
     TmsC
  <- tms-2-tm TmsR' TmR'
  <- tms-2-tm TmsL' TmL'
  <- pres
     Step
     (of/switch TmL' TmR'
	(of/subsump (tp-mode-safe/~> TmsL' TmsC) (=</~> SubL'L Eq) OfFl)
	(of/subsump (tp-mode-safe/~> TmsR' TmsC) (=</~> SubR'R Eq) OfFr)
	OfO' 
     ) 
     Of' 
     Sub.

pres/switch-left : pres 
    step/switch-left 
    (of/switch TmsL TmsR OfFl OfFr (of/left _ _ _ OfL))
    (of/@s OfFl OfL)
    Eq
 <- =<-eq _ Eq.

pres/switch-right : pres 
    step/switch-right
    (of/switch TmsL TmsR OfFl OfFr (of/right _ _ _ OfR))
    (of/@s OfFr OfR)
    Eq
 <- =<-eq _ Eq.
%{ 
we will need a lemma to get terminates working, 
but for now, we know it works 
for the pres/switch-subsump cases because 
we always move the of/subsump to the OfFl and OfFr from the OfO'
so eventually we will match again'st something with of/left or of/right instead of of/subsump for OfO'
and in those two cases, we don't match against OfFl or OfFr.

The same goes for lam, getLeft and getRight.

We also never match on the outputs except where it obviously works, so output coverage should succeed.
}%
%worlds () (pres _ _ _ _).
%covers pres +A +B -C -D.
%trustme %total {A B} (pres A B _ _).
%freeze pres.


pres-wm : step E V -> well-moded (OfE : of E _) -> {OfV : of V Vt } well-moded OfV -> type.
%mode pres-wm +A +B +C -D.
%worlds () (pres-wm _ _ _ _).
%trustme %total {A B C} (pres-wm A B C _).

wm-2-unsafe-free : well-moded (OfE : of E _) -> unsafe-free E -> type.
%mode wm-2-unsafe-free +B -C.
%worlds () (wm-2-unsafe-free _ _).
%trustme %total {A} (wm-2-unsafe-free A _).

unsafe-free-2-absurd : unsafe-free unsafe -> absurd -> type.
%mode unsafe-free-2-absurd +B -C.
%worlds () (unsafe-free-2-absurd _ _).
%total {A} (unsafe-free-2-absurd A _).



get-pres : {Step: step E E' } {Of : of E T} pres Step Of Of' Sub -> type.
%mode get-pres +A +B -C.
%worlds () (get-pres _ _ _).
%trustme %total {A B} (get-pres A B _).


tms-unique : tp-mode-safe A pos -> tp-mode-safe A neg -> absurd -> type.
%mode tms-unique +A +B -C.
%worlds () (tms-unique _ _ _).
%total {A B} (tms-unique A B _).

tm-unique : tp-mode A pos -> tp-mode A neg -> absurd -> type.
%mode tm-unique +A +B -C.
%worlds () (tm-unique _ _ _).
%total {A B} (tm-unique A B _).

from-absurd-ll : {X} absurd -> logic-less X -> type.
%mode from-absurd-ll +X +A -L.
%worlds (of-b | ll-b) (from-absurd-ll _ _ _).
%total {A O} (from-absurd-ll A O _).

subst-logic-less : logic-less (OfX : of X T)
       -> ({x}{dx : of x T} logic-less dx -> logic-less (OfY x : of (F x) Ot))
       -> logic-less (OfY X : of (F X) Ot)
       -> type.

- : subst-logic-less (LL : logic-less (OfX : of X _)) Foo (Foo X OfX LL).
%mode subst-logic-less +D1 +D2 -D3.
%worlds (ll-b) (subst-logic-less _ _ _).
%total {A B} (subst-logic-less A B _).


uan-2-ll : used-as-neg R OfX OfV
        -> logic-less OfV
        -> logic-less OfX
        -> type.

- : uan-2-ll (used-as-neg/sX Uan) LL_V (logic-less/subsump LL_X) <- uan-2-ll Uan LL_V LL_X.

- : uan-2-ll (used-as-neg/sV Uan) (logic-less/subsump LL_V) LL_X <- uan-2-ll Uan LL_V LL_X.

- : uan-2-ll (used-as-neg/lam-inner F_UAN)
             (logic-less/lam F_LL_I : logic-less (of/lam _ TmsA _)) 
             (F_LL_X unsafe (of/unsafe TmsA) logic-less/unsafe)
  <- ({x}{dx : of x T}{ll_x} uan-2-ll (F_UAN x dx) (F_LL_I x dx ll_x) (F_LL_X x dx ll_x)).

- : uan-2-ll (used-as-neg/product UAN_XL UAN_XR) LL_E LL_X
 <- uan-2-ll UAN_XR LL_E (logic-less/getRight LL_X).

- : uan-2-ll used-as-neg/e LLV LLV.

- : uan-2-ll (used-as-neg/app-l UAN_F) (logic-less/app LL_F LL_V) LL_X
 <- uan-2-ll UAN_F LL_F LL_X.
- : uan-2-ll (used-as-neg/app-r UAN_V TmsV-) (logic-less/app LL_F LL_V) LL_X
 <- uan-2-ll UAN_V LL_V LL_X.

- : uan-2-ll (used-as-neg/obj UAN_L UAN_R) (logic-less/obj LL_L LL_R) LL_X
 <- uan-2-ll UAN_L LL_L LL_X.

- : uan-2-ll (used-as-neg/obj UAN_L UAN_R) (logic-less/obj-l LL_L TmsR+) LL_X
 <- uan-2-ll UAN_L LL_L LL_X.
- : uan-2-ll (used-as-neg/obj UAN_L UAN_R) (logic-less/obj-r LL_R TmsL+) LL_X
 <- uan-2-ll UAN_R LL_R LL_X.

- : uan-2-ll (used-as-neg/objL UAN_L TmL- TmR-) (logic-less/obj LL_L LL_R) LL_X
 <- uan-2-ll UAN_L LL_L LL_X.

- : uan-2-ll (used-as-neg/objL UAN_L TmL- TmR-) (logic-less/obj-l LL_L TmsR+) LL_X
 <- uan-2-ll UAN_L LL_L LL_X.
- : uan-2-ll (used-as-neg/objL UAN_L TmL- TmR-) (logic-less/obj-r LL_R TmsL+) LL_X
 <- tms-2-tm TmsL+ TmL+
 <- tm-unique TmL+ TmL- Absurd
 <- from-absurd-ll _ Absurd LL_X.

- : uan-2-ll (used-as-neg/objR UAN_R TmL- TmR-) (logic-less/obj LL_L LL_R) LL_X
 <- uan-2-ll UAN_R LL_R LL_X.

- : uan-2-ll (used-as-neg/objR UAN_R TmL- TmR-) (logic-less/obj-r LL_R TmsL+) LL_X
 <- uan-2-ll UAN_R LL_R LL_X.
- : uan-2-ll (used-as-neg/objR UAN_R TmL- TmR-) (logic-less/obj-l LL_L TmsR+) LL_X
 <- tms-2-tm TmsR+ TmR+
 <- tm-unique TmR+ TmR- Absurd
 <- from-absurd-ll _ Absurd LL_X.

- : uan-2-ll (used-as-neg/sum-unused UAN_XL UAN_XR) (logic-less/switch LL_L LL_R LL_I) LL_X
 <- uan-2-ll UAN_XL LL_L LL_X.

- : uan-2-ll (used-as-neg/sum-used UAN_XI) (logic-less/switch LL_L LL_R LL_I) LL_X
 <- uan-2-ll UAN_XI LL_I LL_X.

- : uan-2-ll (used-as-neg/left UAN_XI) (logic-less/left LL_I) LL_X
 <- uan-2-ll UAN_XI LL_I LL_X.

- : uan-2-ll (used-as-neg/right UAN_XI) (logic-less/right LL_I) LL_X
 <- uan-2-ll UAN_XI LL_I LL_X.

- : uan-2-ll (used-as-neg/getRight UAN_XI) (logic-less/getRight LL_I) LL_X
 <- uan-2-ll UAN_XI LL_I LL_X.

- : uan-2-ll (used-as-neg/getLeft UAN_XI) (logic-less/getLeft LL_I) LL_X
 <- uan-2-ll UAN_XI LL_I LL_X.

%mode uan-2-ll +UanXV +LLV -LLX.

%worlds (of-b | ll-b) (uan-2-ll _ _ _).
%total {A B} (uan-2-ll A B _).


lam-stuck : step (lam F L) R -> absurd -> type.  
%mode lam-stuck +A -B.
%worlds () (lam-stuck _ _).
%total {A} (lam-stuck A _).

absurd-2-of-eq : absurd -> of-eq A B -> type.
%mode absurd-2-of-eq +A -B.
%worlds () (absurd-2-of-eq _ _).
%total {A} (absurd-2-of-eq A _).

absurd-2-tm-eq : absurd -> tm-eq A B -> type.
%mode absurd-2-tm-eq +A -B.
%worlds () (absurd-2-tm-eq _ _).
%total {A} (absurd-2-tm-eq A _).

absurd-2-step-eq : absurd -> step-eq A B -> type.
%mode absurd-2-step-eq +A -B.
%worlds () (absurd-2-step-eq _ _).
%total {A} (absurd-2-step-eq A _).

lam/forms : step (@s (lam F _) V) R -> tm-eq R (F V) -> type.
- : lam/forms step/lam tm-eq/eq.
%mode lam/forms +Step -Eq.
%worlds () (lam/forms _ _).
%total {A} (lam/forms A _). 

%{
 we need to be able to say that for "pres Step (of/@s (of/lam OfF ..) OfV) OfR" then 
 OfR is of the form OfF E1 OfV
}%
pres-lam/forms : pres Step
		      (of/@s (of/lam Foo_OfF TmsV TmsO) (OfV : of V _))
		      OfR _ 
              -> of-eq OfR (Foo_OfF V OfV)
	      -> type.
%mode pres-lam/forms +A -B.
- : pres-lam/forms (pres/lam _ : pres _ (of/@s (of/lam Foo_OfF TmsV TmsO) OfV) _ _) of-eq/eq.
%worlds () (pres-lam/forms _ _).
%trustme %total {A} (pres-lam/forms A _).


res/@s/-forms : {Step : step (@s (lam _ _) _) _} 
                used-as-neg neg OfX OfI
	     -> pres Step (of/@s (OfF : of _ (T ~> _)) OfI) OfV SubVE
             -> tp-mode T neg
             -> well-moded OfF
	     -> logic-less OfV
             -> logic-less OfX
             -> type.
%mode res/@s/-forms +A +B +C +M +D +E -F.
- : res/@s/-forms step/lam UanX_V (pres/lam _) TmV- (wm/lam/- Foo_WmF Foo_UanF) LL_FV LL_X
 <- uan-2-ll (Foo_UanF I OfI) LL_FV LL_V
 <- uan-2-ll UanX_V LL_V LL_X.

- : res/@s/-forms _ _ _ TmV- (wm/lam/+* Foo_WmF : well-moded (of/lam _ TmsV+ _)) _ LL_X
 <- tms-2-tm TmsV+ TmV+
 <- tm-unique TmV+ TmV- Absurd
 <- from-absurd-ll _ Absurd LL_X.
- : res/@s/-forms step/lam UanX_I (pres/lam-subsump _ 
				     (Pres : pres _ (of/@s _ (of/subsump _ SubAA' _)) _ _)
				     _
                                  ) TmV- (wm/subsump WmF) LL_FV LL_X
 <- neg-is-top' SubAA' TmV- TmV'-
 <- res/@s/-forms step/lam (used-as-neg/sV UanX_I) Pres TmV'- WmF LL_FV LL_X.
%worlds () (res/@s/-forms _ _ _ _ _ _ _).
%total {A C M D E B} (res/@s/-forms A B C M D E _).



% that this is pos ensures that the context is in fact resolving
% and prevents us from having to worry about the neg case.
resolving : used-as-neg pos OfX OfE 
	 -> pres Step OfE OfV SubVE
         -> tp-mode-safe Et pos
         -> well-moded (OfE : of E Et)
         -> logic-less OfV
	 -> logic-less OfX
	 -> type.
%mode resolving +UanXE +Step +TmsEp +WM_E +LLV -LLX.

res/unsafe
  : resolving _ (_ : pres Step _ _ _) _ WmE (logic-less/unsafe : logic-less (of/unsafe TpM)) LL_X
 <- pres-wm Step WmE (of/unsafe TpM) WmV
 <- wm-2-unsafe-free WmV UnsfV
 <- unsafe-free-2-absurd UnsfV Absurd
 <- from-absurd-ll _ Absurd LL_X. 



res/uan/product
  : resolving 
     (used-as-neg/product UanXl_E UanXr_E)
     Pres
     TmsE+
     WmE
     LL_V
     LL_Xl
 <- resolving UanXl_E Pres TmsE+ WmE LL_V (logic-less/getLeft LL_Xl).

res/subX 
   : resolving (used-as-neg/sX UanX_V) Pres TmsB+ WmE LL_V (logic-less/subsump LL_X)
  <- resolving UanX_V Pres TmsB+ WmE LL_V LL_X.

res/subX/getLeft
   : resolving (used-as-neg/getLeft (used-as-neg/sX UanX_V)) Pres TmsB+ WmE LL_V (logic-less/subsump LL_X)
  <- resolving (used-as-neg/getLeft UanX_V) Pres TmsB+ WmE LL_V LL_X. 

res/subX/getRight
   : resolving (used-as-neg/getRight (used-as-neg/sX UanX_V)) Pres TmsB+ WmE LL_V (logic-less/subsump LL_X)
  <- resolving (used-as-neg/getRight UanX_V) Pres TmsB+ WmE LL_V LL_X. 

res/subV 
   : resolving 
      (used-as-neg/sV UanX_V : used-as-neg _ _ (of/subsump _ Sub OfE')) 
      (pres/sub _ Pres) 
      TmsE+ 
      (wm/subsump WmE)
      LL_V 
      LL_X
  <- pos-is-bot Sub TmsE+ TmE'+
  <- of-safe OfE' TmsE'
  <- tm-2-tms TmE'+ TmsE' TmsE'+
  <- resolving UanX_V Pres TmsE'+ WmE LL_V LL_X.


res/getLeft-simp
  : resolving 
     (used-as-neg/getLeft UanX_E)
     (pres/getLeft-simp Pres : pres _ _ _ _)
     TmsE+
     (wm/getLeft (WmOf : well-moded Of) TmE' TmR)
     (logic-less/getLeft LL_V)
     LL_X
 <- tm-2-tms TmE' TmsE+ TmsE'+
 <- of-safe Of (tp-mode-safe/prod _ _ TmsR)
 <- tm-2-tms TmR TmsR TmsR+
 <- resolving UanX_E Pres (tp-mode-safe/prod lub/e TmsE+ TmsR+) WmOf LL_V LL_X.


res/getLeft/r-pos/obj
  : resolving 
     (used-as-neg/getLeft (used-as-neg/obj UanX_V UanX_R))
     (_ : pres _ _ _ _)
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- uan-2-ll UanX_V LL_V LL_X.

res/getLeft/r-pos/obj/subV
  : resolving 
     (used-as-neg/getLeft (used-as-neg/sV UanX_E))
     (pres/getLeft-subsump Pres _)
     TmsE+
     (wm/getLeft (wm/subsump WmOfE) TmsA TmsB)
     LL_V
     LL_X
 <- resolving (used-as-neg/sV (used-as-neg/getLeft UanX_E)) Pres TmsE+ (wm/subsump (wm/getLeft WmOfE  TmsA TmsB)) LL_V LL_X.

res/getRight/r-pos/obj/subV
  : resolving
     (used-as-neg/getRight (used-as-neg/sV UanX_E))
     (pres/getRight-subsump Pres _)
     TmsE+
     (wm/getRight (wm/subsump WmOfE)  TmsA TmsB)
     LL_V
     LL_X
 <- resolving (used-as-neg/sV (used-as-neg/getRight UanX_E)) Pres TmsE+ (wm/subsump (wm/getRight WmOfE  TmsA TmsB)) LL_V LL_X.


res/getLeft/r-pos/objL
  : resolving 
     (used-as-neg/getLeft (used-as-neg/objL _ TmV- TmR-))
     (_ : pres _ _ _ SubVE)
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- pos-is-bot SubVE TmsE+ TmV+
 <- tm-unique TmV+ TmV- Absurd
 <- from-absurd-ll _ Absurd LL_X.


res/getLeft/r-pos/objR
  : resolving 
     (used-as-neg/getLeft (used-as-neg/objR _ TmV- TmR-))
     (_ : pres _ _ _ SubVE)
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- pos-is-bot SubVE TmsE+ TmV+
 <- tm-unique TmV+ TmV- Absurd
 <- from-absurd-ll _ Absurd LL_X.

res/getRight/r-pos/obj
  : resolving 
     (used-as-neg/getRight (used-as-neg/obj UanX_V UanX_R))
     (_ : pres _ _ _ _)
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- uan-2-ll UanX_V LL_V LL_X.

res/getRight/r-pos/objL
  : resolving 
     (used-as-neg/getRight (used-as-neg/objL _ TmL- TmV-))
     (_ : pres _ _ _ SubVE)
     TmsE+
     _
     LL_V
     LL_X
 <- pos-is-bot SubVE TmsE+ TmV+
 <- tm-unique TmV+ TmV- Absurd
 <- from-absurd-ll _ Absurd LL_X.


res/getRight/r-pos/objR
  : resolving 
     (used-as-neg/getRight (used-as-neg/objR _ TmL- TmV-))
     (_ : pres _ _ _ SubVE)
     TmsE+
     WmOfE
     LL_V
     LL_X
 <- pos-is-bot SubVE TmsE+ TmV+
 <- tm-unique TmV+ TmV- Absurd
 <- from-absurd-ll _ Absurd LL_X.

res/@s/app-l
  : resolving 
     (used-as-neg/app-l UanXE1) 
     (pres/@s Pres)
     TmsE+ 
     (wm/@s (WmF : well-moded OfEf) WmI) 
     (logic-less/app LL_F LL_I) 
     LL_X
 <- of-safe OfEf (tp-mode-safe/~> TmsA TmsB)
 <- resolving UanXE1 Pres (tp-mode-safe/~> TmsA TmsB) WmF LL_F LL_X.

res/@s/app-r
  : resolving 
     (used-as-neg/app-r UanX_V TmA-)
     _
     TmsB+
     WmE
     (logic-less/app LL_F LL_V)
     LL_X
 <- uan-2-ll UanX_V LL_V LL_X.


res/switch-left
 : resolving 
    (used-as-neg/sum-unused Uan_L Uan_R)
    _
    TmsB+
    WmE
    (logic-less/app LL_F LL_I)
    LL_X
 <- uan-2-ll Uan_L LL_F LL_X.

res/switch-right
 : resolving 
    (used-as-neg/sum-unused Uan_L Uan_R)
    _
    TmsB+
    WmE
    (logic-less/app LL_F LL_I)
    LL_X
 <- uan-2-ll Uan_R LL_F LL_X.

res/@s/app-r/forms
 : resolving 
    (used-as-neg/app-r UanX_V TmV-)
    Pres
    TmsB+
    (wm/@s WmF WmV)
    LL_FV
    LL_X
 <- res/@s/-forms _ UanX_V Pres TmV- WmF LL_FV LL_X.





%worlds () (resolving _ _ _ _ _ _).
%covers resolving +O +A +B +C +D -E.
%terminates {O A B C D} (resolving O A B C D _).
% %total {O A B C D} (resolving O A D C B _).
