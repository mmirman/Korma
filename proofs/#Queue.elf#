%%%%%%%%%%%%%%%%%%%%%%%
% A stack and a queue %
%%%%%%%%%%%%%%%%%%%%%%%
elem : type.

maybe : type.
just : elem -> maybe.
nothing : maybe.
%freeze maybe.

stack : type.
nil : stack.
push : elem -> stack -> stack.
%freeze stack.

pop : stack -> stack -> maybe -> type.
- : pop nil nil nothing.
- : pop (push E S) S (just E).
%mode pop +A -B -C. %worlds () (pop _ _ _). %freeze pop. %total D (pop D _ _).

reverse : stack -> stack -> type.
rev' : stack -> stack -> stack -> type.
- : rev' nil S S.
- : rev' (push E S) S' R
 <- rev' S (push E S') R.
%mode rev' +A +B -C. %worlds () (rev' _ _ _). %total D (rev' D _ _).
- : reverse S S' <- rev' S nil S'.
%mode reverse +S -S'. %worlds () (reverse _ _). %freeze rev' reverse. %total D (reverse D _).

queue : type.
queue/str : stack -> stack -> queue.
%freeze queue.

enqueue : elem -> queue -> queue -> type.
- : enqueue A (queue/str Si So) (queue/str (push A Si) So).
%mode enqueue +A +Qi -Qo. %worlds () (enqueue _ _ _). %freeze enqueue. 
%total D (enqueue D _ _). %total D (enqueue _ D _).

dequeue : queue -> queue -> maybe -> type.
- : dequeue (queue/str nil nil) (queue/str nil nil) nothing.
- : dequeue (queue/str S (push A S')) (queue/str S S') (just A).
- : dequeue (queue/str S nil) (queue/str nil S'') Ret
 <- reverse S S'
 <- pop S' S'' Ret.

%mode dequeue +Qi -Qo -E. %worlds () (dequeue _ _ _). %freeze dequeue. %total D (dequeue D _ _).
%%%%%%%%%%%%%%%%%%%%%%%%%

d-queue : type.
d-queue/str : stack -> stack -> d-queue.
%freeze d-queue.

add-queue : elem -> d-queue -> d-queue -> type.
- : add-queue E (d-queue/str X (push E NewLast)) (d-queue/str X NewLast).
%mode add-queue +E +Qi -Qo. %worlds () (add-queue _ _ _). %freeze add-queue. %total D (add-queue _ D _).

del-queue : d-queue -> d-queue -> maybe -> type.
- : del-queue (d-queue/str (push E NewX) Last) (d-queue/str NewX Last) (just E).
- : del-queue (d-queue/str nil Last) (d-queue/str nil Last) nothing.
%mode del-queue +Qi -Qo -E. %worlds () (del-queue _ _ _). %freeze del-queue. %total D (del-queue D _ _).
