% twelf-server-send-command "set unsafe true"
%%%%%%%%%%%%%%%%%%%%%%%%
% what resolvedness is %
%%%%%%%%%%%%%%%%%%%%%%%%
mode : type.
pos : mode.
neg : mode.
%mode mode.
%freeze mode.
%name mode Gs.

<m : mode -> mode -> type. %infix right 5 <m.
%mode <m +A +B.
<m/e : A <m A.
<m/pn : pos <m neg.

ub : mode -> mode -> mode -> type.
ub/p : A <m C -> B <m C -> ub A B C.
%freeze ub. %name ub UB.

lub : mode -> mode -> mode -> type.
lub/e : lub A A A.
lub/pl : lub pos neg neg.
lub/pr : lub neg pos neg.
%mode lub +A +B -C.
%worlds () (lub _ _ _). 
%unique lub +A +B -1C.
%total {A B} (lub A B _).
%freeze lub. %name lub LUB.

glb : mode -> mode -> mode -> type.
glb/e : glb A A A.
glb/pl : glb pos neg pos.
glb/pr : glb neg pos pos.
%mode glb +A +B -C.
%worlds () (glb _ _ _). 
%unique glb +A +B -1C.
%total {A B} (glb A B _).
%freeze glb. %name glb GLB.

mode-sub-trans : A <m B -> B <m C -> A <m C -> type.
%mode mode-sub-trans +A +B -C.
mode-sub-trans/e :  mode-sub-trans <m/e A A.
mode-sub-trans/pn : mode-sub-trans <m/pn <m/e <m/pn.
%worlds () (mode-sub-trans _ _ _).
%unique mode-sub-trans +A +B -1C.
%total {A B} (mode-sub-trans A B _).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% the types in the language %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tp : type.
tp-mode : tp -> mode -> type.
%mode tp-mode +A -B.

~> : tp -> tp -> tp. %infix right 6 ~>.
unit : tp.
sum : tp-mode Ta A -> tp-mode Tb B -> ub A B C -> tp.
%% should make this lub and not ub- infact, it could get removed all together 
prod : tp-mode Ta A -> tp-mode Tb B -> tp.  

tp-mode/~> : tp-mode (B ~> A) pos.
tp-mode/unit : tp-mode unit pos.
tp-mode/sum : tp-mode (sum _ _ (_ : ub _ _ C)) C.
tp-mode/prod : tp-mode (prod (_ : tp-mode _ A) (_ : tp-mode _ B)) C <- lub A B C.
%worlds () (tp-mode _ _).
%unique tp-mode +A -1B.
%total {} (tp-mode _ _).
%name tp-mode TM.
%name tp T t.

%% effectiveness lemma for lub
has-lub : {A}{B} lub A B C -> type.
%mode has-lub +A +B -D.
- : has-lub _ _ lub/e.
- : has-lub _ _ lub/pl.
- : has-lub _ _ lub/pr.
%worlds () (has-lub _ _ _).
%unique has-lub +A +B -1LUB.
%total {A B} (has-lub A B _).

%% effectiveness lemma for tp-mode
has-tp-mode : {T} tp-mode T M -> type.
%mode has-tp-mode +T -TpMode.
- : has-tp-mode _ tp-mode/~>.
- : has-tp-mode _ tp-mode/unit.
- : has-tp-mode _ tp-mode/sum.
- : has-lub _ _ LUB -> has-tp-mode _ (tp-mode/prod LUB).
%worlds () (has-tp-mode _ _).
%unique has-tp-mode +A -1B.
%total {} (has-tp-mode _ _).



=< : tp -> tp -> type. %infix right 5 =<.
%mode =< +A +B.
=</unit : unit =< unit.
=</~> : A' =< A -> B =< B' -> (A ~> B) =< (A' ~> B').
=</sum :  M <m M'
       -> A =< A'
       -> B =< B'
       -> (sum (_ : tp-mode A _) (_ : tp-mode B _) (_ : ub _ _ M)) =< (sum (_ : tp-mode A' _) (_ : tp-mode B' _) (_ : ub _ _ M')).
=</prod :  A =< A'
        -> B =< B'
        -> (prod (_ : tp-mode A _) (_ : tp-mode B _)) =< (prod (_ : tp-mode A' _) (_ : tp-mode B' _)).

=<-trans : A =< B -> B =< C -> A =< C -> type. 
=<-trans' : B =< C -> A =< B -> A =< C -> type. 


=<-eq : {A} A =< A -> type.
=<-eq/unit : =<-eq unit =</unit.
=<-eq/~> : =<-eq (Ta ~> Tb) (=</~> A B) <- =<-eq Tb B <- =<-eq Ta A.
=<-eq/sum : =<-eq (sum (_: tp-mode Ta _) (_ : tp-mode Tb _) _) (=</sum <m/e A B) 
         <- =<-eq Tb B 
         <- =<-eq Ta A.
=<-eq/prod : =<-eq (prod (_: tp-mode Ta _) (_ : tp-mode Tb _)) (=</prod A B)  
          <- =<-eq Tb B 
          <- =<-eq Ta A.
%mode =<-eq +T -A.
%worlds () (=<-eq _ _).
%unique =<-eq +T -1A.
%total {A} (=<-eq A _).


eq-gen : {Eq : A =< A} =<-eq A Eq -> type.
%mode eq-gen +A -B.
%worlds () (eq-gen _ _).
%trustme %total {A} (eq-gen A _).

%mode =<-trans +A +B -C.
%mode =<-trans' +A +B -C.
- : =<-trans =</unit =</unit =</unit.
- : =<-trans (=</~> AA' BB') (=</~> A'A'' B'B'') (=</~> AA'' BB'') <- =<-trans' AA' A'A'' AA'' <- =<-trans BB' B'B'' BB''.
- : =<-trans (=</sum MM' AA' BB') (=</sum M'M'' A'A'' B'B'') (=</sum MM'' AA'' BB'') <- =<-trans AA' A'A'' AA'' <- =<-trans BB' B'B'' BB'' <- mode-sub-trans MM' M'M'' MM''. 
- : =<-trans (=</prod AA' BB') (=</prod A'A'' B'B'') (=</prod AA'' BB'') <- =<-trans AA' A'A'' AA'' <- =<-trans BB' B'B'' BB''.

- : =<-trans' =</unit =</unit =</unit.
- : =<-trans' (=</~> A'A'' B'B'') (=</~> AA' BB') (=</~> AA'' BB'') <- =<-trans A'A'' AA' AA'' <- =<-trans' B'B'' BB' BB''.
- : =<-trans' (=</sum M'M'' A'A'' B'B'') (=</sum MM' AA' BB') (=</sum MM'' AA'' BB'') <- =<-trans' A'A'' AA' AA'' <- =<-trans' B'B'' BB' BB'' <- mode-sub-trans MM' M'M'' MM''. 
- : =<-trans' (=</prod A'A'' B'B'') (=</prod AA' BB') (=</prod AA'' BB'') <- =<-trans' A'A'' AA' AA'' <- =<-trans' B'B'' BB' BB''.

%worlds () (=<-trans _ _ _) (=<-trans' _ _ _).
%unique (=<-trans +A +B -1C) (=<-trans' +A' +B' -1C').
%total (A B) (=<-trans A _ _) (=<-trans' B _ _).

=<implies<m : A =< A' -> tp-mode A M -> tp-mode A' M' -> M <m M' -> type.

%freeze =<implies<m.


% The definition of a tm (again)
% and other stuff with progress theorem
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tm : tp -> type.

subRes : tp -> type.
subRes/dual : {B} tm B -> B =< B' -> subRes B'.

getSubRes : subRes B' -> {B} tm B -> B =< B' -> type.
%mode getSubRes +A -B -C -D.
getSubRes/get : getSubRes (subRes/dual B TmB BsB') B TmB BsB'.

used-as-neg : tm A -> tm B -> type.
used-neg : ({A'} A' =< A -> tm A' -> subRes B) -> type.


lam : {F : {A'} A' =< A -> tm A' -> subRes B } used-neg F -> tm (A ~> B).
empty : tm unit.
obj : tm A -> tm B -> tm (prod (A_m_Ma : tp-mode A _) (B_m_Mb : tp-mode B _)).
getLeft : tm (prod (A_m_M : tp-mode A M) (_ : tp-mode _ M)) -> tm A.
getRight : tm (prod (_ : tp-mode _ M) (B_m_M : tp-mode B M)) -> tm B.
left : tm (A ~> sum (_ : tp-mode A _) _ _).
right : tm (B ~> sum _ (_ : tp-mode B _) _).
% switch should be GLB not LUB, but right now just making them equal seems good enough.
switch : tm (A ~> C) 
      -> tm (B ~> C) 
      -> tm (sum (_ : tp-mode A MC) (_ : tp-mode B MC) (_ : ub _ _ MC) ~> C).
logic-var : tp-mode B neg -> tm B.
@s : tm (A ~> C) -> tm A' -> A' =< A -> tm C.
%name tm E.



used-as-neg' : tm A -> subRes B -> type.
used-as-neg'/eval : used-as-neg' A SubResB 
                 <- getSubRes SubResB _ TmB _
                 <- used-as-neg A TmB.

result-neg : type.
%freeze result-neg.
used-neg/+* : used-neg (L : {t'} t' =< T -> tm t' -> subRes R) 
            <- tp-mode T pos.
used-neg/-- : used-neg (L : {t'} t' =< T -> tm t' -> subRes R) 
	    <- tp-mode R neg
	    <- tp-mode T neg
	    <- ({t' : tp }{s : t' =< T}{a : tm t'} result-neg -> used-as-neg' a (L t' s a)).
used-neg/-+ : used-neg (L : {t'} t' =< T -> tm t' -> subRes R) 
	    <- tp-mode R pos
	    <- tp-mode T neg
	    <- ({t' : tp }{s : t' =< T}{a : tm t'} used-as-neg' a (L t' s a)).

used-as-neg/e : result-neg -> tp-mode T neg -> used-as-neg (A : tm T) A.
used-as-neg/lam-inner : ({T'}{s}{e} used-as-neg' A (F T' s e)) 
		      -> used-as-neg A (lam F _).
used-as-neg/app-l : used-as-neg A E1 
                 -> used-as-neg A (@s E1 E2 _).
used-as-neg/app-r : tp-mode T1 neg 
%                 -> tp-mode T1' neg    
% we might need this in the future, I need to think about it.  The current 
% fail case is something like "(E : _/ - ~> +) y" where y is the variable to be used as neg
% rather then ensure that y is in fact neg, we just assert that we now can let the result be 
% neg by restricted subsumption.
                 -> (result-neg -> used-as-neg A E2)
                 -> used-as-neg A (@s (E1 : tm (T1 ~> T2)) (E2 : tm T1') _).

used-as-neg/objL : used-as-neg A L 
		-> tp-mode To neg
                -> used-as-neg A (obj (L : tm To) R).

used-as-neg/objR : used-as-neg A R 
		-> tp-mode To neg
                -> used-as-neg A (obj L (R  : tm To)).

used-as-neg/product : used-as-neg (getLeft A) E 
                   -> used-as-neg (getRight A) E 
                   -> used-as-neg A E.

used-as-neg/sum-unused : used-as-neg A L1 
                       -> used-as-neg A L2 
                       -> used-as-neg A (switch L1 L2).


%worlds () (getSubRes _ _ _ _).
%total {A} (getSubRes A _ _ _).

not-val : tm A -> type.
%mode not-val +A.
not-val/getLeft : not-val (getLeft _).
not-val/getRight : not-val (getRight _).
not-val/@s : not-val (@s _ _ _).
%worlds () (not-val _).




step : tm A -> tm A' -> A' =< A -> type.

%mode step +A -B -C.

step/@s : step (@s E1 E2 A'eA) (@s E1' E2 A'eA'') B'eB
       <- step E1 E1' (=</~> AeA'' B'eB)
       <- =<-trans A'eA AeA'' A'eA''.

step/lam : step (@s (lam V _) (E : tm T) S) TmB (B'eB : B' =< B) <- getSubRes (V T S E) B' TmB B'eB.

step/getLeft : step (getLeft (obj L _)) (L : tm Lt) Eq <- =<-eq Lt Eq.

step/getLeft-simp : step (getLeft A) (getLeft A') L'eL 
                 <- not-val A 
                 <- step A A' (=</prod L'eL _).
             
step/getRight : step (getRight (obj _ R)) (R : tm Rt) Eq <- =<-eq Rt Eq.

step/getRight-simp : step (getRight A) (getRight A') R'eR 
                  <- not-val A
                  <- step A A' (=</prod _ R'eR).

step/switch-left  : step (@s (switch (LF : tm (_ ~> ResT)) _) (@s left L LeP) (=</sum _ PeL' _)) (@s LF L LeL') Eq
                 <- =<-trans LeP PeL' LeL'
                 <- =<-eq ResT Eq.

step/switch-right : step (@s (switch _ (RF : tm (_ ~> ResT))) (@s right R ReP) (=</sum _ _ PeR')) (@s RF R ReR') Eq
                <- =<-trans ReP PeR' ReR'
                 <- =<-eq ResT Eq.

%worlds () (step _ _ _).
%name step Step.

neg-is-top : A =< A' -> tp-mode A neg -> tp-mode A' neg -> type.
%mode neg-is-top +A +B -C. %worlds () (neg-is-top _ _ _).
%trustme %total {} (neg-is-top _ _ _).

pos-is-bot : A =< A' -> tp-mode A' pos -> tp-mode A pos -> type.
%mode pos-is-bot +A +B -C. %worlds () (pos-is-bot _ _ _).
%trustme %total {} (pos-is-bot _ _ _).




logic-less : tm A -> type.
logic-less' : subRes A -> type.
logic-less'/get : logic-less' Sub <- getSubRes Sub _ TmB _ <- logic-less TmB.

%mode (logic-less +A) (logic-less' +A). 
%name logic-less LL.
%name logic-less' LL'.



logic-less/app-+ : logic-less (@s (Fe : tm (At ~> Bt)) Ie _) 
               <- logic-less Ie
               <- tp-mode Bt pos.

% in this case, we simply don't care what happens.
logic-less/app++ : logic-less (@s (Fe : tm (At ~> Bt)) _ _) 
                <- tp-mode Bt pos
                <- tp-mode At pos.

logic-less/app : logic-less (@s (Fe : tm (At ~> Bt)) Ie _) 
              <- logic-less Ie
              <- logic-less Fe.

logic-less/lam : logic-less (lam F _) 
              <- {a}{s}{i} logic-less i -> logic-less' (F a s i).

logic-less/empty : logic-less empty.
logic-less/obj : logic-less (obj A B) <- logic-less B <- logic-less A.
logic-less/getLeft : logic-less A -> logic-less (getLeft A).

logic-less/getRight : logic-less A -> logic-less (getRight A).

logic-less/left : logic-less left.
logic-less/right : logic-less right.

%{
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Some lemmas for unpacking and effectiveness
}%

%% unpacking lemma for used-as-neg
unpack-used-as-neg' : used-as-neg' TmA SubResB -> used-as-neg TmA TmB -> type.
%mode unpack-used-as-neg' +UaN' -R.
- : unpack-used-as-neg' (used-as-neg'/eval UsedAsNegATmB getSubRes/get) UsedAsNegATmB.
%worlds () (unpack-used-as-neg' _ _).
%unique unpack-used-as-neg' +A -1C.
%total {A} (unpack-used-as-neg' A _).




uan-2-ll : used-as-neg E (B : tm T) -> tp-mode T pos -> logic-less E -> type.
%mode uan-2-ll +UsedAsNeg +Pos -LogicLess.

% - : uan-2-ll (used-as-neg/lam-inner LAM) Pos (logic-less/lam _).


%worlds () (uan-2-ll _ _ _).
%total {A B} (uan-2-ll A B _).
