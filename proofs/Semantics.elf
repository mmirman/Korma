% getting to unsafe-mode in emacs: twelf-server-send-command "set unsafe true"

%%%%%%%%%%%%%%%%%%%%%%%%
% what resolvedness is %
%%%%%%%%%%%%%%%%%%%%%%%%
res : type.
ground : res.
unground : res.
%mode res.
%worlds () (res).

%freeze res.
%name res G g.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% an unground and anything %
% else make an unground    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
connect : res -> res -> res -> type.
connect/ul : connect unground ground unground.
connect/ur : connect ground unground unground.
connect/u : connect unground unground unground.
connect/g : connect ground ground ground.

%mode connect +A +B -C.
%worlds () (connect _ _ _).
%freeze connect.
%name connect Con con.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% the types in the language %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tp : type.
~> : tp -> tp -> tp. %infix right 6 ~>.
unit : tp.
answer : tp.
sum : tp -> tp -> tp.
prod : tp -> tp -> tp.
forall : (tp -> tp) -> tp.
mu : (tp -> tp) -> tp.
%freeze tp.
%name tp T t.

%%%%%%%%%%%%%%%%%%%%%%%
% Predicates on types %
%%%%%%%%%%%%%%%%%%%%%%%
matchable : tp -> type.
matchable/unit : matchable unit.
matchable/answer : matchable answer.
matchable/sum : matchable (sum A B) <- matchable A <- matchable B.
matchable/prod : matchable (prod A B) <- matchable A <- matchable B.
matchable/forall : matchable (forall V) <- {A} matchable A -> matchable (V A).
matchable/mu : matchable (mu V) <- {A} matchable A -> matchable (V A).
%mode matchable +A.
%block var-matchable : block {A} {_:matchable A}.
%worlds (var-matchable) (matchable _).
%freeze matchable.

%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ascriptions for lambdas %
%%%%%%%%%%%%%%%%%%%%%%%%%%%
ascription : tp -> type.
ascription/matchable : matchable T -> res -> ascription T.
ascription/unmatchable : ascription T.

%mode ascription +T.
%worlds () (ascription _).
%freeze ascription.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% an unground and anything %
% else make an unground    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
subsumpG : res -> res -> type.
subsumpG/eq : subsumpG A A.
subsumpG/neq : subsumpG unground ground.

%worlds () (subsumpG _ _).
%mode subsumpG +A +B.
%freeze subsumpG.
%name subsumpG SubG s.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The term syntax and type rules %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tm : type.

% in progress element
elem : tp -> type.
elem/resolved : tm -> tm -> elem A.
elem/unresolved : tm -> elem A.

% the definition of a stack
%%%%%%%%%%%%%%%%%%%%%%%%%%%
stack : tp -> type.
nil : stack A.
push : elem A -> stack A -> stack A.

% some the definition of a queue
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
queue : tp -> type.
queue/str : stack A -> stack A -> queue A.

% The definition of a tm
%%%%%%%%%%%%%%%%%%%%%%%%
lam : ascription T -> (tm -> tm) -> tm.
Lam : (tp -> tm) -> tm.
@ : tm  -> tm -> tm. %infix left 6 @.
empty : tm.
success : tm.
fail : tm.
obj : tm -> tm -> tm.
getLeft : tm.
getRight : tm.
left : tm -> tm.
right : tm -> tm.
switch : tm -> tm -> tm.
findAll : {A : tp} matchable A -> queue A -> tm -> tm.

roll : tm -> tp -> tm.   % roll is equivelent to a constructor.
unroll : tm -> tp -> tm. % unroll is equivelent to a pattern.
logic-var : tm.
% ascription
# : tm -> tp -> tm. %infix left 5 #.

%freeze queue stack tm.
%name tm E e.

;; : tm -> tp -> type. %infix left 5 ;;.

;;/lam : ({x} x ;; T1 -> E x ;; T2) 
      -> lam (_:ascription T1) E ;; T1 ~> T2.

;;/Lam : ({a} E a ;; T a)
      -> Lam E ;; forall T.

;;/@ : E1 ;; T1 ~> T2 
    -> E2 ;; T1
    -> E1 @ E2 ;; T2.

;;/# : E ;; forall T1 
    -> E # T2 ;; T1 T2.

;;/roll : E ;; T (mu T)
       -> roll E (mu T) ;; mu T.

;;/unroll : E ;; mu T 
         -> unroll E (mu T) ;; T (mu T).

;;/empty : empty ;; unit.
;;/success : success ;; answer.
;;/fail : fail ;; answer.
;;/obj : E  ;; T 
      -> E' ;; T' 
      -> obj E E' ;; prod T T'.
;;/getLeft : getLeft ;; forall [a] forall [b] prod a b ~> a.
;;/getRight : getLeft ;; forall [b] forall [a] prod a b ~> b.
;;/left : E ;; A 
       -> left E ;; sum A B.
;;/right : E ;; B 
        -> right E ;; sum A B.
;;/switch : E  ;; A ~> C 
         -> E' ;; B ~> C 
         -> switch E E' ;; sum A B ~> C.
;;/findAll : matchable A
          -> E ;; A ~> answer
          -> findAll A _ _ E ;; sum A unit.
;;/logic-var : logic-var ;; A.

%%%%%%%%%%%%%%%%%%%%%%%%%
% definition of a maybe %
%%%%%%%%%%%%%%%%%%%%%%%%%
maybe : tp -> type.
just : elem A -> maybe A.
nothing : maybe A.
%freeze maybe.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% some theorems about queues %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pop : stack A -> stack A -> maybe A -> type.
- : pop nil nil nothing.
- : pop (push E S) S (just E).
%mode pop +A -B -C. %worlds () (pop _ _ _). %freeze pop. %total D (pop D _ _).

reverse : stack A -> stack A -> type.
rev' : stack A -> stack A -> stack A -> type.
- : rev' nil S S.
- : rev' (push E S) S' R
 <- rev' S (push E S') R.
%mode rev' +A +B -C. %worlds () (rev' _ _ _). %total D (rev' D _ _).
- : reverse S S' <- rev' S nil S'.
%mode reverse +S -S'. %worlds () (reverse _ _). %freeze rev' reverse. %total D (reverse D _).

enqueue : elem A -> queue A -> queue A -> type.
- : enqueue A (queue/str Si So) (queue/str (push A Si) So).
%mode enqueue +A +Qi -Qo. %worlds () (enqueue _ _ _). %freeze enqueue. 
%total D (enqueue D _ _). %total D (enqueue _ D _).

dequeue : queue A -> queue A -> maybe A -> type.
- : dequeue (queue/str nil nil) (queue/str nil nil) nothing.
- : dequeue (queue/str S (push A S')) (queue/str S S') (just A).
- : dequeue (queue/str S nil) (queue/str nil S'') Ret
 <- reverse S S'
 <- pop S' S'' Ret.
%mode dequeue +Qi -Qo -E. %worlds () (dequeue _ _ _). %freeze dequeue. %total D (dequeue D _ _).

queue-empty : queue A -> type.
- : queue-empty (queue/str nil nil).
%mode queue-empty +Q. %worlds () (queue-empty _). %freeze queue-empty. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% What constitutes a final value %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
value : tm -> type.
value/empty : value empty.
value/success : value success.
value/fail : value fail.
value/lam : value (lam _ _).
value/Lam : value (Lam _).
value/unroll : value A -> value (unroll A _).
value/roll : value A -> value (roll A _).
value/obj : value (obj _ _).
value/left : value (left _).
value/right : value (right _).
value/getLeft : value getLeft.
value/getRight : value getRight.
value/switch : value (switch _ _).
value/findAll : queue-empty V -> value (findAll _ _ V _).
%mode value +V.
%worlds () (value _).
%freeze value.
%name value V v.

resolved : tm -> type.
resolved/empty : resolved empty.
resolved/success : resolved success.
resolved/fail : resolved fail.
resolved/obj : resolved (obj A B) <- resolved A <- resolved B.
resolved/left : resolved (left A) <- resolved A.
resolved/right : resolved (right B) <- resolved B.
resolved/roll : resolved (roll A _) <- resolved A.
resolved/unroll : resolved (unroll A _) <- resolved A.

%mode resolved +V.
%worlds () (resolved _).
%freeze resolved.
%name resolved V v.

unresolved : tm -> type.
unresolved/obj-left : unresolved (obj A B) <- unresolved A.
unresolved/obj-right : unresolved (obj A B) <- unresolved B.
unresolved/left : unresolved (left A) <- unresolved A.
unresolved/right : unresolved (right B) <- unresolved B.
unresolved/logic-var : unresolved logic-var.
unresolved/roll : unresolved (roll A _) <- unresolved A.
unresolved/unroll : unresolved (unroll A _) <- unresolved A.
%mode unresolved +V.
%worlds () (unresolved _).
%freeze unresolved.
%name unresolved V v.

% we can approximate resolve-more by always one child
% into exactly two new children (given we only have binary sums/products)
% even if they need to be identical.
resolve        : tp -> tm -> tm -> tm -> type.
resolve/answer : resolve answer logic-var success fail.
resolve/sum    : resolve (sum _ _) logic-var (left logic-var) (right logic-var).
resolve/left   : resolve Ta Ea L R
              -> resolve (sum Ta _) (left Ea) (left L) (left R).
resolve/right  : resolve Tb Eb L R
              -> resolve (sum _ Tb) (right Eb) (right L) (right R).

resolve/unit   : resolve unit logic-var empty empty.
resolve/prod   : resolve (prod _ _) logic-var (obj logic-var logic-var) (obj logic-var logic-var).
resolve/prod-L : resolve (prod Ta _) (obj Ea Eb) (obj La Eb) (obj Ra Eb)
              <- unresolved Ea
              <- resolve Ta Ea La Ra.
resolve/prod-R : resolve (prod _ Tb) (obj Ea Eb) (obj Ea Lb) (obj Ea Rb)
              <- resolved Ea
              <- resolve Tb Eb Lb Rb.
resolve/mu     : resolve (mu T) logic-var (roll A (mu T)) (roll B (mu T))
              <- resolve (T (mu T)) logic-var A B.
resolve/roll   : resolve (mu T) (roll E (mu T)) (roll A (mu T)) (roll B (mu T))
              <- resolve (T (mu T)) E A B.
%mode resolve +T +A -B -C.
%worlds () (resolve _ _ _ _).
%freeze resolve.

% resolvable : E ;; T -> matchable T -> unresolved E -> resolve T E A B -> type.
% %mode resolvable +Is +M +U -R.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% High level Operational Semantics %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% inherent in the step is the proof of preservation
|-> : tm -> tm -> type. %infix right 0 |->.

step/@ : E1 @ E2 |-> E1' @ E2
         <- E1 |-> E1'.

%% step/lam is non strict, but also not memoizing.
step/lam : lam _ V @ E |-> V E.

step/# : E |-> E' 
      -> E # T |-> E' # T.

step/Lam : Lam E # T |-> E T.

step/getLeft : getLeft @ obj L _ |-> L.
step/getRight : getRight @ obj _ R |-> R.

step/switch-left : switch LF _ @ left L |-> LF @ L.
step/switch-right : switch _ RF @ right R |-> RF @ R.

step/findAll-start : findAll S M Q L |-> findAll S M Q' L
    		  <- queue-empty Q
                  <- enqueue (elem/unresolved logic-var) Q Q'.

step/findAll-succ : findAll _ _ Q _ |-> left Solved
  		 <- dequeue Q _ (just (elem/resolved Solved success)).

step/findAll-end-fail : findAll _ _ Q _ |-> right empty
		     <- dequeue Q Q' (just (elem/resolved S fail))
		     <- queue-empty Q'.

step/findAll-fail : findAll T M Q L |-> findAll T M Q' L
		 <- dequeue Q Q' (just (elem/resolved S fail)).

step/findAll-step : findAll T M Q L |-> findAll T M Q'' L
  		 <- dequeue Q Q' (just (elem/resolved S E))
                 <- E |-> E'
                 <- enqueue (elem/resolved S E') Q' Q''.

step/findAll-resolved : findAll T M Q L |-> findAll T M Q'' L
		     <- dequeue Q Q' (just (elem/unresolved S))
		     <- resolved S
		     <- enqueue (elem/resolved S (L @ E')) Q' Q''.

step/findAll-unresolved : findAll T M Q L |-> findAll T M Qo L
		       <- dequeue Q Q' (just (elem/unresolved S))
		       <- resolve T S Sa Sb
		       <- enqueue (elem/unresolved Sa) Q' Qinter
		       <- enqueue (elem/unresolved Sb) Qinter Qo.

%freeze |->. %name |-> Step.

not_stuck : tm -> type.
not_stuck/val : value E
             -> not_stuck E.
not_stuck/step : E |-> E'
              -> not_stuck E.

%freeze not_stuck. %name not_stuck NotStuck.
