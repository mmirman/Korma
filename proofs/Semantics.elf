step : tm -> tm -> type. %name step Step.
step* : tm -> tm -> type. %name step Step*.
%mode (step +A -B) (step* +A -B).

step*/e : step* A A.
step*/s : step* A C <- step A B <- step* B C.

step/app : step (@s E_F V) (F V)
        <- step* E_F (lam F _).

step/getLeft : step (getLeft (obj L _)) L.

step/getLeft : step (getLeft A) (getLeft A')
            <- step* A A'.
             
step/getRight : step (getRight (obj _ R)) R.

step/getRight-simp : step (getRight A) (getRight A')
                  <- not-value A
                  <- step A A'.

step/switch-left  : step (switch LF _ I) (@s LF L)
		 <- step I (left L).

step/switch-right : step (switch _ RF I) (@s RF R)
		 <- step I (right R).

%worlds (tm-b) (step _ _) (step* _ _).

%unique (step +A -1B) (step* +A -1B).