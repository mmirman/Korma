% getting to unsafe-mode in emacs: twelf-server-send-command "set unsafe true"

%%%%%%%%%%%%%%%%%%%%%%%%
% what resolvedness is %
%%%%%%%%%%%%%%%%%%%%%%%%
sres : type.
output : sres.
input : sres.
%freeze sres.
%name sres Gs.

%% the output of res is it's size and ensures it is finite.
res : type.
res/t : sres -> res.
~>> : res -> res -> res. %infix right 6 ~>>.
forallRes : (sres -> res) -> res.
%freeze res.
%name res G.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% the types in the language %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tp : type.
~> : tp -> tp  -> tp. %infix right 6 ~>.
unit : tp.
answer : tp.
sum : tp -> tp  -> tp.
prod : tp -> tp -> tp.
forall : (tp -> tp) -> tp.
mu : (tp -> tp ) -> tp.
%freeze tp.
%name tp T t.

%%%%%%%%%%%%%%%%%%%%%%%
% Predicates on types %
%%%%%%%%%%%%%%%%%%%%%%%
matchable : tp -> type.
matchable/unit : matchable unit.
matchable/answer : matchable answer.
matchable/sum : matchable (sum A B) <- matchable A <- matchable B.
matchable/prod : matchable (prod A B)  <- matchable A <- matchable B.
matchable/forall : matchable (forall V) <- {A:tp} matchable A -> matchable (V A).
matchable/mu : matchable (mu V) <- {A : tp} matchable A -> matchable (V A).
%mode matchable +A.
%freeze matchable.

ascription : tp -> res -> type.
as : {A} {R} ascription A R.
%mode ascription +A +B. %worlds () (ascription _ _). %total {} (ascription _ _).
%freeze ascription.
%name ascription As.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The term syntax and type rules %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% terms must be properly typed, for the sake of simplicity of progress
%% and preservation theorems, and leveraging rank 1 polymorphism.
tm : tp -> type.

gen : ({T : tp} res -> tm (F T)) -> tm (forall F).
lam : ascription T _ -> (tm T -> tm T' ) -> tm (T ~> T').
# : tm (forall F) -> ascription T _ -> tm (F T). %infix left 5 #.
@ : tm (T ~> T') -> tm T -> tm T'. %infix left 6 @.
empty : tm unit.
success : tm answer.
fail : tm answer.
obj : tm A -> tm B -> tm (prod A B).
getLeft : tm (prod A B ~> A).
getRight : tm (prod A B ~> B).
left : tm A -> tm (sum A B). 
right : tm B -> tm (sum A B).
switch : tm (A ~> C) -> tm (B ~> C) -> tm (sum A B ~> C).
findAll : matchable A -> tm (A ~> answer) -> tm (sum A unit).

free : matchable A -> tm (A ~> B) -> tm B.

roll : tm (T (mu T)) -> tm (mu T).   % roll is equivelent to a constructor.
unroll : tm (mu T) -> tm (T (mu T)). % unroll is equivelent to a pattern.
logic-var : tm A.
%freeze tm.
%name tm E e.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% What constitutes a final value %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
value : tm _ -> type.
value/empty : value empty.
value/success : value success.
value/fail : value fail.
value/lam : value (lam _ _).
value/unroll : value A -> value (unroll A).
value/roll : value A -> value (roll A).
value/obj : value (obj _ _).
value/left : value (left _).
value/right : value (right _).
value/getLeft : value getLeft.
value/getRight : value getRight.
value/switch : value (switch _ _).
%mode value +V.
%freeze value.
%name value V v.

resolved : tm _ -> type.
resolved/empty : resolved empty.
resolved/success : resolved success.
resolved/fail : resolved fail.
resolved/obj : resolved (obj A B) <- resolved A <- resolved B.
resolved/left : resolved (left A) <- resolved A.
resolved/right : resolved (right B) <- resolved B.
resolved/roll : resolved (roll A) <- resolved A.
resolved/unroll : resolved (unroll A) <- resolved A.
%mode resolved +V.
%freeze resolved.
%name resolved V v.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% High level Operational Semantics %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% inherent in the step is the proof of preservation
|-> : tm A -> tm A -> type. %infix right 0 |->.

step/@ : E1 @ E2 |-> E1' @ E2
         <- E1 |-> E1'.

%% step/lam is non strict, but also not memoizing.
step/lam : lam _ V @ E |-> V E.

step/gen : gen E # as T R |-> E T R.
step/# : E |-> E' 
      -> E # T |-> E' # T.

step/unroll1 : E |-> E'
            -> unroll E |-> unroll E'.

step/unroll2 : unroll (roll E) |-> E.

step/roll : E |-> E'
         -> roll E |-> roll E'.

step/getLeft : getLeft @ obj L _ |-> L.
step/getRight : getRight @ obj _ R |-> R.

step/switch-left : switch LF _ @ left L |-> LF @ L.
step/switch-right : switch _ RF @ right R |-> RF @ R.

% a proof that one thing succeeds.
step/findAll-succ : E @ V |-> success
                 -> findAll (_ : matchable A) E |-> left V.

% a proof that everything fails.
step/findAll-fail : findAll (_ : matchable A) E |-> right empty
                 <- {V} E @ V |-> fail.

step/free : free (_ : matchable A) E |-> E @ V.

%freeze |->. %name |-> Step.

%%%%%%%%%%%%%%%%%%%%%%%%%
% an input and anything %
% else make an input    %
%%%%%%%%%%%%%%%%%%%%%%%%%
subsump : res -> res -> type.
subsump/in : subsump A (res/t input).
subsump/eq : subsump A A.
subsump/~>> : subsump (A ~>> A') (B ~>> B') 
           <- subsump B A
           <- subsump A' B'.
subsump/forallResSup : subsump A (forallRes F)
		    <- subsump A (F output)
   		    <- subsump A (F input).
subsump/forallResSubG : subsump (forallRes F) B
		    <- subsump (F output) B.
subsump/forallResSubU : subsump (forallRes F) B
		    <- subsump (F input) B.
%mode subsump +A +B.
%freeze subsumpG.
%name subsumpG SubG s.

connect : res -> res -> res -> type.
connect/in : connect G1 G2 G 
	  <- subsump G1 G
	  <- subsump G2 G.

connectEx : res -> res -> type.
connectEx/ex : connectEx G1 G 
            <- connect G1 G2 G.
%freeze connectEx.

%% the negation of subsump.  
incompatibleG : sres -> sres -> type.
incompatibleG/neq : incompatibleG input output.
%mode incompatibleG +A +B.

incompatible : res -> res -> type.
incompatible/res/t : incompatible (res/t A) (res/t B) <- incompatibleG A B.
incompatible/~>>L : incompatible (A ~>> A') (B ~>> B') <- incompatible B A.
incompatible/~>>R : incompatible (A ~>> A') (B ~>> B') <- incompatible A' B'.
incompatible/~>>res : incompatible (_ ~>> _) (res/t _).
incompatible/~>>res : incompatible (res/t _) (_ ~>> _).
incompatible/forallO : incompatible A (forallRes F) <- incompatible A (F output).
incompatible/forallI : incompatible A (forallRes F) <- incompatible A (F input).
incompatible/forallSub : incompatible (forallRes F) B <- incompatible (F output) B <- incompatible (F input) B.
%mode incompatible +A +B.
%freeze incompatible.


%%%%%%%%%%%%%%%%%%%%%%
% Mode declarations  %
%%%%%%%%%%%%%%%%%%%%%%
moded : tm _ -> res -> type.
unmoded : tm _ -> res -> type. % specifies that this doesn't have the required mode.

unmoded-either : tm A -> res -> tm B -> res -> type.
unmoded-either/L : unmoded-either As1 G1 _ _ <- unmoded As1 G1.
unmoded-either/R : unmoded-either _ _ As2 G2 <- unmoded As2 G2.

% need to specify that E is actually used in F somehow.
moded/lamOut : moded (lam (as _ (res/t input)) F) ((res/t input) ~>> Out)
            <- ({E} moded E (res/t output) -> unmoded (F E) Out)
	    <- ({E} moded E (res/t input) -> moded (F E) Out).


moded/lamIn : moded (lam (as _ (res/t output)) F) ((res/t output) ~>> Out)
            <- {E} moded E (res/t output) -> moded (F E) Out. 

moded/lam~>> : moded (lam (as _ (A ~>> B)) F) ((A ~>> B) ~>> Out)
            <- {E} moded E (A ~>> B) -> moded (F E) Out.

moded/lamForall : moded (lam (as _ (forallRes A)) F) ((forallRes A) ~>> Out)
	       <- {E} moded E (forallRes A) -> moded (F E) Out.

moded/# : moded (A # as _ R) R
       <- moded A R.

moded/gen : moded (gen F) Out 
         <- {T} moded (F T Any) Out.

moded/@ : moded (A @ B) T
       <- moded A (G ~>> T)
       <- moded B G'
       <- subsump G' G.
moded/empty : moded empty (res/t output).
moded/success : moded success (res/t output).
moded/fail : moded fail (res/t output).
moded/obj : moded (obj As1 As2) G
         <- moded As1 G1
	 <- moded As2 G2
         <- connect G1 G2 G.
moded/left : moded (left As1) G1
	  <- moded As1 G1
          <- connectEx G1 G.
moded/right : moded (right As2) G
	   <- moded As2 G2
	   <- connectEx G2 G.
moded/switch : moded (switch As1 As2) (G ~>> Go)
            <- moded As1 (G1 ~>> Go)
   	    <- moded As2 (G2 ~>> Go)
	    <- connect G1 G2 G.
moded/logic-var : moded logic-var (res/t input).
moded/findAll : moded (findAll _ Arg) (res/t output)
             <- moded Arg (res/t output ~>> res/t output).
moded/getLeft : moded getLeft (forallRes [s] res/t s ~>> res/t s).
moded/getRight : moded getRight (forallRes [s] res/t s ~>> res/t s).
moded/roll : moded (roll E) Res
	  <- moded E Res.
moded/unroll : moded (unroll E) Res
            <- moded E Res.


%% unmoded is the negation of moded.
%% fortunately, lam can be written smaller.
unmoded/lam : unmoded (lam (as _ M) F) (M ~>> Out) 
	   <- unmoded (F E) Out 
           <- moded E M.

unmoded/lamI : unmoded (lam _ F) G
	    <- incompatible (_ ~>> _) G.

unmoded/lamAll : unmoded (lam (as T M) F) (M ~>> Out) 
              <- {E : tm T} unmoded E M.

unmoded/#1 : unmoded (A # as _ R) R <- unmoded A R.
unmoded/#2 : unmoded (A # as _ R) Out <- incompatible R Out.

unmoded/gen : unmoded (gen F) Out <- {Any} unmoded (F T Any) Out.

unmoded/@ : unmoded (A @ B) R
	 <- {G : res} {G' : res} subsump G' G -> unmoded-either A (G ~>> R) B G'.

unmoded/empty : unmoded empty G <- incompatible (res/t output) G.
unmoded/success : unmoded success G <- incompatible (res/t output) G.
unmoded/fail : unmoded fail G <- incompatible (res/t output) G. 

unmoded/logic-var : unmoded logic-var G <- incompatible (res/t input) G.

unmoded/obj : unmoded (obj As1 As2) G
           <- {G1} {G2} connect G1 G2 G -> unmoded-either As1 G1 As2 G2.

unmoded/sub : unmoded A G <- unmoded A G' <- subsump G G'.

unmoded/left : unmoded (left As1) G
     	    <- {G1} connectEx G1 G -> unmoded As1 G1.

unmoded/right : unmoded (right As2) G
     	    <- {G2} connectEx G2 G -> unmoded As2 G2.

unmoded/switch : unmoded (switch As1 As2) (G ~>> Go)
	      <- {G1} {G2} connect G1 G2 G -> unmoded-either As1 (G1 ~>> Go) As2 (G2 ~>> Go) .

moded/findAll : unmoded (findAll _ Arg) G
	     <- incompatible (res/t output) G
             <- unmoded Arg (res/t output ~>> res/t output).

moded/getLeft : unmoded getLeft G
             <- incompatible (forallRes [s] res/t s ~>> res/t s) G.
moded/getRight : unmoded getRight G
             <- incompatible (forallRes [s] res/t s ~>> res/t s) G.

unmoded/roll : unmoded (roll E) Res <- unmoded E Res.
unmoded/unroll : unmoded (unroll E) Res <- unmoded E Res.

%freeze unmoded unmoded-either moded.

% we don't need to prove "progress" actually, just the presservation of modedness.
% and that a moded, matchable, value expression is resolved.
moded-pres : moded I M
	  -> I |-> O
          -> moded O M 
	  -> type.
%mode moded-pres +M +O -M'.

not-stuck : tm A -> type.
not-stuck/val : value E -> not-stuck E.
not-stuck/findAll : not-stuck (findAll _ _).
not-stuck/step : E |-> E'
              -> not-stuck E.
%freeze not-stuck.

progress : moded E M
        -> not-stuck E
        -> type.




%freeze progress.

stuffy : tp -> tp -> type.
stuffy/a : stuffy A A.
%mode stuffy +A +B.

starving : tp -> tp -> type.
starving/eq : starving A A <- stuffy A A.

%mode starving +A -B.


