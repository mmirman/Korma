of-eq : of A T -> of A T -> type.
of-eq/eq : of-eq A A.
%freeze of-eq.

tm-eq :  tm -> tm -> type.
tm-eq/eq : tm-eq A A.
%freeze tm-eq.

step-eq : step T T' -> step S S' -> type.
step-eq/eq : step-eq A A.
%freeze step-eq.

logic-less : tm -> tp -> type. %name logic-less LL.

logic-less/subsump : logic-less (sub A) _
                  <- of A At
		  <- logic-less A At.

logic-less/unsafe : tp-mode-safe T M -> logic-less unsafe T.

logic-less/app : logic-less (@s F V) O
  	      <- of F (Vt ~> O)
	      <- of V Vt
              <- logic-less V Vt
              <- logic-less F (Vt ~> O).

logic-less/lam : logic-less (lam F I) (I ~> O)
	      <- {x} of x I -> logic-less x I -> logic-less (F x) O.

logic-less/empty : logic-less empty unit.
logic-less/obj : logic-less (obj L R) (prod Lt Rt)
              <- logic-less R Rt
              <- logic-less L Lt.

logic-less/getLeft : logic-less (getLeft A) Lt
	          <- of A (prod Lt Rt)
                  <- logic-less A (prod Lt Rt).

logic-less/getRight : logic-less (getRight A) Rt
                   <- of A (prod Lt Rt)
                   <- logic-less A (prod Lt Rt).

logic-less/left : logic-less (left L Rt) (sum Lt Rt _) <- logic-less L Lt.
logic-less/right : logic-less (right Lt R) (sum Lt Rt _) <- logic-less R Rt.

logic-less/obj-l : logic-less (obj L R) (prod Lt Rt)
                <- tp-mode-safe Rt pos
                <- logic-less L Lt.

logic-less/obj-r : logic-less (obj L R) (prod Lt Rt)
                <- tp-mode-safe Lt pos
                <- logic-less R Rt.

logic-less/switch : logic-less (switch L R I) O
                 <- of R (Rt ~> O)
		 <- of L (Lt ~> O)
		 <- of I (sum Lt Rt M)
                 <- logic-less I (sum Lt Rt M)
		 <- logic-less R (Rt ~> O)
		 <- logic-less L (Lt ~> O).

%block ll-b : some {t} block {e}{_: of e t}{_ : logic-less e t}.
%worlds (ll-b) (logic-less _ _).

unsafe-free : tm -> type.

unsafe-free/lam 
   : unsafe-free (lam F _)
  <- {x} unsafe-free x -> unsafe-free (F x).
unsafe-free/empty 
   : unsafe-free empty.
unsafe-free/obj 
   : unsafe-free (obj L R) 
  <- unsafe-free R
  <- unsafe-free L.
unsafe-free/getLeft 
   : unsafe-free (getLeft I)
  <- unsafe-free I.
unsafe-free/getRight 
   : unsafe-free (getRight I)
  <- unsafe-free I.
unsafe-free/left
   : unsafe-free (left I _)
  <- unsafe-free I.
unsafe-free/right
   : unsafe-free (right _ I)
  <- unsafe-free I.
unsafe-free/switch
   : unsafe-free (switch L R I)
  <- unsafe-free I
  <- unsafe-free R
  <- unsafe-free L.
unsafe-free/logic-var 
   : unsafe-free logic-var.
unsafe-free/@s
   : unsafe-free (@s F V)
  <- unsafe-free V
  <- unsafe-free F.

%block unsafe-free-b : block {x}{_:unsafe-free x}.



not-stuck : tm -> type.
not-stuck/value : value A -> not-stuck A.
not-stuck/step : step E E' -> not-stuck E.
%freeze not-stuck.