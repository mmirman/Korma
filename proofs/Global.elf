of-eq : of A T -> of A T -> type.
of-eq/eq : of-eq A A.
%freeze of-eq.

tm-eq :  tm -> tm -> type.
tm-eq/eq : tm-eq A A.
%freeze tm-eq.

step-eq : step T T' -> step S S' -> type.
step-eq/eq : step-eq A A.
%freeze step-eq.


logic-less : of E T -> type. %name logic-less LL.

logic-less/subsump : logic-less (of/subsump _ _ Of) <- logic-less Of.

logic-less/unsafe : logic-less (of/unsafe _).

logic-less/app : logic-less (of/@s OfFe OfIe)
              <- logic-less OfIe
              <- logic-less OfFe.

logic-less/lam : logic-less (of/lam F TmsA _) 
   <- {x}{dx} logic-less dx -> logic-less (F x dx).

logic-less/empty : logic-less of/empty.
logic-less/obj : logic-less (of/obj L R)
              <- logic-less R
              <- logic-less L.

logic-less/getLeft : logic-less A -> logic-less (of/getLeft A).

logic-less/getRight : logic-less A -> logic-less (of/getRight A).

logic-less/left : logic-less (of/left _ _ _ L) <- logic-less L.
logic-less/right : logic-less (of/right _ _ _ R) <- logic-less R.

logic-less/obj-l : logic-less (of/obj L (R : of _ Rt)) 
                <- tp-mode-safe Rt pos
                <- logic-less L.

logic-less/obj-r : logic-less (of/obj (L : of _ Lt) R) 
                <- tp-mode-safe Lt pos
                <- logic-less R.

logic-less/switch : logic-less (of/switch _ _ L R I)
                 <- logic-less I
		 <- logic-less R
		 <- logic-less L.


%block ll-b : some {t} block {e}{of_x: of e t}{_ : logic-less of_x}.
%worlds (ll-b) (logic-less _).


ll-new : of-eq Of Of' -> logic-less Of -> logic-less Of' -> type.
- : ll-new of-eq/eq LL_X LL_X.
%mode ll-new +A +B -C.
%worlds () (ll-new _ _ _).
%total {A B} (ll-new A B _).

unsafe-free : tm -> type.

unsafe-free/lam 
   : unsafe-free (lam F _)
  <- {x} unsafe-free x -> unsafe-free (F x).
unsafe-free/empty 
   : unsafe-free empty.
unsafe-free/obj 
   : unsafe-free (obj L R) 
  <- unsafe-free R
  <- unsafe-free L.
unsafe-free/getLeft 
   : unsafe-free (getLeft I)
  <- unsafe-free I.
unsafe-free/getRight 
   : unsafe-free (getRight I)
  <- unsafe-free I.
unsafe-free/left
   : unsafe-free (left I)
  <- unsafe-free I.
unsafe-free/right
   : unsafe-free (right I)
  <- unsafe-free I.
unsafe-free/switch
   : unsafe-free (switch L R I)
  <- unsafe-free I
  <- unsafe-free R
  <- unsafe-free L.
unsafe-free/logic-var 
   : unsafe-free logic-var.
unsafe-free/@s
   : unsafe-free (@s F V)
  <- unsafe-free V
  <- unsafe-free F.

%block unsafe-free-b : block {x}{_:unsafe-free x}.



not-stuck : tm -> type.
not-stuck/value : value A -> not-stuck A.
not-stuck/step : step E E' -> not-stuck E.
%freeze not-stuck.