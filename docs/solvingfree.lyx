#LyX file created by tex2lyx 1.6.9
\lyxformat 264
\begin_document
\begin_header
\textclass article
\begin_preamble
 
\usepackage{babel}\textwidth = 500pt
\oddsidemargin=-1cm
\newcommand{\judges}{ \; \; \; \Gamma \vdash}


\end_preamble
\language english
\inputencoding latin9
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Title

IO in a Lazy Functional Logic Language
\end_layout

\begin_layout Author

Matthew Mirman
\end_layout

\begin_layout Standard

Suppose we have a lazy, functional logical language, with subtyping, parameterized types, and either rank 1 bounded quantification, or type classes. I present a type level static solution to ensuring that logical nondeterminism does not enter the IO monad, and cause unwanted effects. In the case of a nominal type system with type classes, I also present a method for ensuring the unifiability of the free variables.
\end_layout

\begin_layout Standard

The language has three logical functions: free 
\begin_inset Formula $x$
\end_inset

 in 
\begin_inset Formula $e$
\end_inset

, findall 
\begin_inset Formula $x$
\end_inset

 in 
\begin_inset Formula $e$
\end_inset

, and 
\begin_inset Formula $e_1 =:= e_2$
\end_inset

. free 
\begin_inset Formula $x$
\end_inset

 in 
\begin_inset Formula $e$
\end_inset

 states that 
\begin_inset Formula $x$
\end_inset

 is a free logical variable in 
\begin_inset Formula $e$
\end_inset

. findall 
\begin_inset Formula $x$
\end_inset

 in 
\begin_inset Formula $e$
\end_inset

 searches for all 
\begin_inset Formula $x$
\end_inset

 that satisfy 
\begin_inset Formula $e$
\end_inset

, and makes 
\begin_inset Formula $x$
\end_inset

 a free logical variable. 
\begin_inset Formula $e_1 =:= e_2$
\end_inset

, unifies 
\begin_inset Formula $e_1$
\end_inset

 with 
\begin_inset Formula $e_2$
\end_inset

 and nondeterministically branches on free variables. In order to unify, the variables must be unifiable, and constructed from products and sums only.
\end_layout

\begin_layout Standard

We assign rough types to these functions as follows:
\end_layout

\begin_layout Standard


\begin_inset Formula $free :: (Unifiable \; a) => (a \rightarrow b) \rightarrow b $
\end_inset

,
\end_layout

\begin_layout Standard


\begin_inset Formula $findall :: (Unifiable \; a) => (a \rightarrow Success) \rightarrow [a]$
\end_inset

 and
\end_layout

\begin_layout Standard


\begin_inset Formula $(=:=) :: Success \rightarrow Success \rightarrow Success$
\end_inset

.
\end_layout

\begin_layout Standard

In a pure lazy functional setting, such as haskell, IO has traditionally been accomplished with the IO monad. In order to not deviate from this pattern, it is necessary to ensure that computations still make sense from within the IO monad, and the scope of the free variables does not make it to effects, unnecessarily. Ensuring that the nondeterminism of free does not make it into the IO monad statically can be made into a type level problem by the following system.
\end_layout

\begin_layout Standard

Suppose we have two parameterized types 
\begin_inset Formula $Many \; a$
\end_inset

 and 
\begin_inset Formula $Single \; a$
\end_inset

, with the following subtyping rules:
\end_layout

\begin_layout Standard


\begin_inset Formula $(S-ReturnQuantity)\frac{
   \judges a <: b
}{
   \judges Single \; a <: Many \; b 
}$
\end_inset


\end_layout

\begin_layout Standard

First, a typeclass solution: assume 
\begin_inset Formula $Single$
\end_inset

 and 
\begin_inset Formula $Many$
\end_inset

 are instances of the built in of the 
\begin_inset Formula $ReturnQuantity$
\end_inset

 typeclass. We then construct a new application function
\end_layout

\begin_layout Standard


\begin_inset Formula $ \$\$:: ReturnQuantity\; m => (a \rightarrow m\; b) \rightarrow \; (m \; a \rightarrow m \;b)$
\end_inset


\end_layout

\begin_layout Standard

The main of the program will have type 
\begin_inset Formula $Single \; (IO \; ())$
\end_inset

, and 
\begin_inset Formula $return :: a -> Single \; (m \; a)$
\end_inset


\end_layout

\begin_layout Standard

Then the two determinism altering logical functions will have the following types:
\end_layout

\begin_layout Standard


\begin_inset Formula $free :: (Unifiable \; a) => (a \rightarrow Many \; b) \rightarrow Many\; b $
\end_inset


\end_layout

\begin_layout Standard


\begin_inset Formula $findall :: (Unifiable \; a) => (a \rightarrow Many \; Success) \rightarrow Single \; [a]$
\end_inset


\end_layout

\begin_layout Standard

This way, any function which is deterministic can be used anywhere a nondeterministic function can be used, but not visa versa.
\end_layout

\begin_layout Standard

To make this feature not cumbersome to the user, we walk the abstract syntax tree, and every time there is a function application
\end_layout

\begin_layout Standard


\begin_inset Formula $ e_1 \; e_2 $
\end_inset

, we transform it to 
\begin_inset Formula $ e_1 \; \$\$ e_2 $
\end_inset

. This can be done with the following rule:
\end_layout

\begin_layout Standard


\begin_inset Formula $\phi (e_1 \; e_2) = \phi (e_1) \$\$ \phi (e_2) $
\end_inset

.
\end_layout

\begin_layout Standard


\begin_inset Formula $\phi (\lambda x . e ) = \phi (\lambda x . e)$
\end_inset

.
\end_layout

\begin_layout Standard

An advantage of this transformation is the proof of decidability of type inference is trivial, as the proof that the syntactic transformation preserves the intended semantics is trivial, and the decidability of type inference after the transformation is known.
\end_layout

\begin_layout Standard

with obvious extensions to objects and switchables.
\end_layout

\begin_layout Standard

The associated solution with rank 1 bounded quantification would be to assign the following type:
\end_layout

\begin_layout Standard


\begin_inset Formula $ \$\$:: \forall m <: Many => (a \rightarrow m \; b) \rightarrow \; (m \; a \rightarrow m \;b)$
\end_inset


\end_layout

\end_body
\end_document
