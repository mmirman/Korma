We can solve the kind-ordering problem via graph -> matrix and fast squaring with a custom * and +.

given:

data Q a b = { R b -> a, P (R a) -> P a }
data R a = { a -> Int }
data P a = { R a -> Q a a }

Q.a <--(+) O
Q.a <--(+) P.a

Q.b <--(+) R.a

R.a <--(-) O

P.a <--(+) Q.a
P.a <--(+) Q.b
P.a <--(-) R.a


so we write:
 T1.arg <--(+) T2.arg if T1's arg is used for T2's arg in a covariant position in the body of T1     " _ -> {T2.arg = T1.arg} "
 T1.arg <--(-) T2.arg if T1's arg is used for T2's arg in a contravariant position in the body of T1 " {T2.arg = T1.arg} -> _ "


Q.a <-- P.a <--(-) R.a  ???  
what do we do for " P (R a) -> _ " in Q?



P (R a) is in a contravariant position.
{ P.a -> { R.a -> Q.a } } -> _
{ P.a (-)--> { R.a -> Q.a } } 
P.a's negated value should get multiplied against R.a's value to produce the value for Q.a


Operations: 
"V1 <= V2"  :=  "V1 = V1 & V2"

"a & b"  := 
   & is reflexive
   '-' & '+' = '='
   a & a = a
   '=' & a = '='
   '#' & a = a

"a * b" :=
   * is reflexive
   '-' * '-' = '+'
   '+' * '+' = '+'
   '-' * '+' = '-'
   '=' * a   = '='
   '#' * a   = 'a'

"  -a" := -'-' = '+'
       := -'+' = '-'
       := -'#' = '#'
       := -'=' = '='

data Q a b = { R b -> a, P (R a) -> P a }
data R a = { a -> Int }
data P a = { R a -> Q a a }

so we get the following constraints:
Qa <= '#'  ... Pa <= '#'

Qa <= -Pa * Ra
Qa <= '+'
Qa <= Pa
Qb <= -Ra
Ra <= '-'
Pa <= Qa
Pa <= Qb
Pa <= -Ra

1. Do a topological sort.  
2. do magic.

     Qa | Qb | Ra | Pa | O
    ----------------------
Qa |  #     
Qb |      #
Ra |           #
Pa |                #
O  |                    0
